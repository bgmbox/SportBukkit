From d0f4a4f265828bbc11d91f55b8fbe654a03e9a1f Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 29 Mar 2016 02:00:35 -0400
Subject: [PATCH] Entity bounding box API


diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 7742e5e..b367baa 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -7,6 +7,7 @@ import org.bukkit.Nameable;
 import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.geometry.Cuboid;
 import org.bukkit.metadata.Metadatable;
 import org.bukkit.util.Vector;
 
@@ -56,10 +57,10 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
 
     /**
      * Apply an impulse to this entity, i.e. a relative change in velocity.
-     *
+     * <p>
      * The given vector is added to the current velocity, and the entity's new
      * velocity is synced to players in visible range.
-     *
+     * <p>
      * If this entity is a player, the impulse is sent directly to them,
      * and will be applied by their client at the moment they receive it.
      * This results in more accurate physics, from the player's perspective,
@@ -67,11 +68,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
      * velocity is more difficult to predict from the server.
      */
     void applyImpulse(Vector impulse);
+
     void applyImpulse(Vector impulse, boolean relative);
 
     /**
      * Set the knockback reduction for this entity.
-     *
+     * <p>
      * Set this to 0 for standard knockback mechanics.
      * Set this to 1 to disable all knockback effects.
      * Values between 0 and 1 reduce knockback impulses proportionally.
@@ -87,11 +89,11 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
 
     /**
      * Get the velocity of this entity, preferring an inferred value, if there is one.
-     *
+     * <p>
      * For {@link Player}s, this velocity is partly derived from positions reported by
      * the client. This can be much more accurate than the velocity stored on the
      * server, which is not affected by player movement at all.
-     *
+     * <p>
      * For all other entities, this returns the same value as {@link #getVelocity()}.
      */
     Vector getPredictedVelocity();
@@ -140,7 +142,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
      * vehicle, it will be dismounted prior to teleportation.
      *
      * @param location New location to teleport this entity to
-     * @param cause The cause of this teleportation
+     * @param cause    The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
     public boolean teleport(Location location, TeleportCause cause);
@@ -159,7 +161,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
      * vehicle, it will be dismounted prior to teleportation.
      *
      * @param destination Entity to teleport this entity to
-     * @param cause The cause of this teleportation
+     * @param cause       The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
     public boolean teleport(Entity destination, TeleportCause cause);
@@ -302,6 +304,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
     /**
      * Make the given entities passengers of this vehicle. Any existing
      * passengers who are not in the list are ejected.
+     *
      * @return given entities that could NOT become passengers for whatever reason
      */
     List<Entity> setPassengers(List<Entity> passengers);
@@ -337,7 +340,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
      * This event may have been cancelled.
      *
      * @return the last known {@link EntityDamageEvent} or null if hitherto
-     *     unharmed
+     * unharmed
      */
     public EntityDamageEvent getLastDamageCause();
 
@@ -394,6 +397,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
 
     /**
      * Enter the given vehicle
+     *
      * @return true if successful
      */
     boolean enterVehicle(Entity vehicle);
@@ -538,6 +542,8 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
      */
     boolean removeScoreboardTag(String tag);
 
+    Cuboid getBoundingBox();
+
     /**
      * Returns the reaction of the entity when moved by a piston.
      *
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index fe08ce4..e740872 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -9,6 +9,7 @@ import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.attribute.Attributable;
 import org.bukkit.block.Block;
+import org.bukkit.geometry.Ray;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
@@ -43,6 +44,12 @@ public interface LivingEntity extends Attributable, Entity, Damageable, Projecti
     public Location getEyeLocation();
 
     /**
+     * Get a {@link Ray} originating at this entity's eye position,
+     * and pointing in the direction this entity is looking.
+     */
+    Ray getEyeRay();
+
+    /**
      * Gets all blocks along the living entity's line of sight.
      * <p>
      * This list contains all blocks from the living entity's eye position to
