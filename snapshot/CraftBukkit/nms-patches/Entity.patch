--- a/net/minecraft/server/Entity.java
+++ b/net/minecraft/server/Entity.java
@@ -16,15 +16,55 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.EntityLocation;
+import org.bukkit.Location;
+import org.bukkit.PoseFlag;
+import org.bukkit.Server;
+import org.bukkit.TravelAgent;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.*;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.plugin.PluginManager;
+// CraftBukkit end
+
 public abstract class Entity implements ICommandListener {
 
+    // CraftBukkit start
+    private static final int CURRENT_LEVEL = 2;
+    static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
+        return tag.hasKey("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
+    }
+
+    protected CraftEntity bukkitEntity;
+
+    public CraftEntity getBukkitEntity() {
+        if (bukkitEntity == null) {
+            bukkitEntity = CraftEntity.getEntity(world.getServer(), this);
+        }
+        return bukkitEntity;
+    }
+    // CraftBukikt end
+
     private static final Logger a = LogManager.getLogger();
     private static final List<ItemStack> b = Collections.emptyList();
     private static final AxisAlignedBB c = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
     private static double f = 1.0D;
-    private static int entityCount;
+    public static int entityCount; // SportBukkit - private -> public
     private int id;
-    public boolean i;
+    public boolean i; public void setCanObstruct(boolean yes) { this.i = yes; } // SportBukkit - add setter
     public final List<Entity> passengers;
     protected int j;
     private Entity au;
@@ -69,12 +109,13 @@
     protected Random random;
     public int ticksLived;
     public int fireTicks;
+    public boolean wasOnFire; // SportBukkit - to detect when the fire goes out
     public boolean inWater;
     public int noDamageTicks;
     protected boolean justCreated;
     protected boolean fireProof;
     protected DataWatcher datawatcher;
-    protected static final DataWatcherObject<Byte> Z = DataWatcher.a(Entity.class, DataWatcherRegistry.a);
+    protected static final DataWatcherObject<Byte> Z = DataWatcher.a(Entity.class, DataWatcherRegistry.a); public static final DataWatcherObject<Byte> FLAGS = Z; // SportBukkit - add public alias
     private static final DataWatcherObject<Integer> aA = DataWatcher.a(Entity.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<String> aB = DataWatcher.a(Entity.class, DataWatcherRegistry.d);
     private static final DataWatcherObject<Boolean> aC = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
@@ -102,6 +143,15 @@
     private boolean aI;
     private final double[] aJ;
     private long aK;
+    // CraftBukkit start
+    public boolean valid;
+    public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+    public boolean forceExplosionKnockback; // SPIGOT-949
+
+    public float getBukkitYaw() {
+        return this.yaw;
+    }
+    // CraftBukkit end
 
     public Entity(World world) {
         this.id = Entity.entityCount++;
@@ -208,6 +258,33 @@
     }
 
     protected void setYawPitch(float f, float f1) {
+        // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(f)) {
+            f = 0;
+        }
+
+        if (f == Float.POSITIVE_INFINITY || f == Float.NEGATIVE_INFINITY) {
+            if (this instanceof EntityPlayer) {
+                this.world.getServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid yaw");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+            f = 0;
+        }
+
+        // pitch was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(f1)) {
+            f1 = 0;
+        }
+
+        if (f1 == Float.POSITIVE_INFINITY || f1 == Float.NEGATIVE_INFINITY) {
+            if (this instanceof EntityPlayer) {
+                this.world.getServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid pitch");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+            f1 = 0;
+        }
+        // CraftBukkit end
+
         this.yaw = f % 360.0F;
         this.pitch = f1 % 360.0F;
     }
@@ -230,6 +307,51 @@
         this.Y();
     }
 
+    // CraftBukkit start
+    public void postTick() {
+        // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+        if (!this.world.isClientSide && this.world instanceof WorldServer) {
+            this.world.methodProfiler.a("portal");
+            if (this.ak) {
+                MinecraftServer minecraftserver = this.world.getMinecraftServer();
+
+                if (true || minecraftserver.getAllowNether()) { // CraftBukkit
+                    if (!this.isPassenger()) {
+                        int i = this.Z();
+
+                        if (this.al++ >= i) {
+                            this.al = i;
+                            this.portalCooldown = this.aM();
+                            byte b0;
+
+                            if (this.world.worldProvider.getDimensionManager().getDimensionID() == -1) {
+                                b0 = 0;
+                            } else {
+                                b0 = -1;
+                            }
+
+                            this.b(b0);
+                        }
+                    }
+
+                    this.ak = false;
+                }
+            } else {
+                if (this.al > 0) {
+                    this.al -= 4;
+                }
+
+                if (this.al < 0) {
+                    this.al = 0;
+                }
+            }
+
+            this.I();
+            this.world.methodProfiler.b();
+        }
+    }
+    // CraftBukkit end
+
     public void Y() {
         this.world.methodProfiler.a("entityBaseTick");
         if (this.isPassenger() && this.bJ().dead) {
@@ -246,6 +368,8 @@
         this.lastZ = this.locZ;
         this.lastPitch = this.pitch;
         this.lastYaw = this.yaw;
+        // Moved up to postTick
+        /*
         if (!this.world.isClientSide && this.world instanceof WorldServer) {
             this.world.methodProfiler.a("portal");
             if (this.ak) {
@@ -285,6 +409,7 @@
             this.I();
             this.world.methodProfiler.b();
         }
+        */
 
         this.as();
         this.aq();
@@ -305,8 +430,11 @@
             }
         }
 
-        if (this.au()) {
-            this.burnFromLava();
+        // SportBukkit start - pass position
+        final BlockPosition lavaPos = insideLavaBlockPosition();
+        if (lavaPos != null) {
+            this.burnFromLava(lavaPos);
+            // SportBukkit end
             this.fallDistance *= 0.5F;
         }
 
@@ -333,9 +461,30 @@
         return 1;
     }
 
-    protected void burnFromLava() {
+    protected void burnFromLava(BlockPosition lavaPos) { // SportBukkit - add position
         if (!this.fireProof) {
-            this.damageEntity(DamageSource.LAVA, 4.0F);
+            // CraftBukkit start - Fallen in lava TODO: this event spams!
+            org.bukkit.block.Block lavaBlock = this.world.getWorld().getBlockAt(lavaPos.getX(), lavaPos.getY(), lavaPos.getZ());
+            try {
+                CraftEventFactory.blockDamage = lavaBlock;
+                this.damageEntity(DamageSource.LAVA, 4);
+            } finally {
+                CraftEventFactory.blockDamage = null;
+            }
+
+            if (this instanceof EntityLiving) {
+                // Note that in order for cancelling or custom duration to work properly,
+                // this event must be fired every tick, thus we cannot avoid "spamming" it.
+                org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+                EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(lavaBlock, damagee, 15);
+                this.world.getServer().getPluginManager().callEvent(combustEvent);
+
+                if (!combustEvent.isCancelled()) {
+                    this.setOnFire(combustEvent.getDuration());
+                }
+                return;
+            }
+            // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
             this.setOnFire(15);
         }
     }
@@ -358,6 +507,9 @@
     }
 
     protected void ac() {
+        // SportBukkit start - call EntityDespawnInVoidEvent
+        this.world.getServer().getPluginManager().callEvent(new EntityDespawnInVoidEvent(this.bukkitEntity));
+        // SportBukkit end
         this.die();
     }
 
@@ -376,6 +528,22 @@
             this.a(this.getBoundingBox().d(d0, d1, d2));
             this.recalcPosition();
         } else {
+            // CraftBukkit start - Don't do anything if we aren't moving
+            // We need to do this regardless of whether or not we are moving thanks to portals
+            try {
+                this.checkBlockCollisions();
+            } catch (Throwable throwable) {
+                CrashReport crashreport = CrashReport.a(throwable, "Checking entity block collision");
+                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being checked for collision");
+
+                this.appendEntityCrashDetails(crashreportsystemdetails);
+                throw new ReportedException(crashreport);
+            }
+            // Check if we're moving
+            if (d0 == 0 && d1 == 0 && d2 == 0 && this.isVehicle() && this.isPassenger()) {
+                return;
+            }
+            // CraftBukkit end
             if (enummovetype == EnumMoveType.PISTON) {
                 long i = this.world.getTime();
 
@@ -517,7 +685,7 @@
                 }
             }
 
-            boolean flag = this.onGround || d1 != d1 && d1 < 0.0D;
+            boolean flag = this.onGround || d1 != d8 && d1 < 0.0D; // CraftBukkit - decompile error
             double d11;
 
             if (this.P > 0.0F && flag && (d7 != d0 || d9 != d2)) {
@@ -615,7 +783,7 @@
             this.world.methodProfiler.a("rest");
             this.recalcPosition();
             this.positionChanged = d7 != d0 || d9 != d2;
-            this.B = d1 != d1;
+            this.B = d1 != d8; // CraftBukkit - decompile error
             this.onGround = this.B && d8 < 0.0D;
             this.C = this.positionChanged || this.B;
             l = MathHelper.floor(this.locX);
@@ -650,6 +818,28 @@
                 block1.a(this.world, this);
             }
 
+            // CraftBukkit start
+            if (positionChanged && getBukkitEntity() instanceof Vehicle) {
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.block.Block bl = this.world.getWorld().getBlockAt(MathHelper.floor(this.locX), MathHelper.floor(this.locY), MathHelper.floor(this.locZ));
+
+                if (d7 > d0) {
+                    bl = bl.getRelative(BlockFace.EAST);
+                } else if (d7 < d0) {
+                    bl = bl.getRelative(BlockFace.WEST);
+                } else if (d9 > d2) {
+                    bl = bl.getRelative(BlockFace.SOUTH);
+                } else if (d9 < d2) {
+                    bl = bl.getRelative(BlockFace.NORTH);
+                }
+
+                if (bl.getType() != org.bukkit.Material.AIR) {
+                    VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+            }
+            // CraftBukkit end
+
             if (this.playStepSound() && (!this.onGround || !this.isSneaking() || !(this instanceof EntityHuman)) && !this.isPassenger()) {
                 double d22 = this.locX - d4;
                 double d23 = this.locY - d5;
@@ -685,6 +875,8 @@
                 }
             }
 
+            // CraftBukkit start - Move to the top of the method
+            /*
             try {
                 this.checkBlockCollisions();
             } catch (Throwable throwable) {
@@ -694,15 +886,38 @@
                 this.appendEntityCrashDetails(crashreportsystemdetails);
                 throw new ReportedException(crashreport);
             }
+            */
+            // CraftBukkit end
 
             boolean flag1 = this.an();
 
-            if (this.world.e(this.getBoundingBox().shrink(0.001D))) {
-                this.burn(1);
+            // SportBukkit start - get the location of the fire block
+            final BlockPosition firePos = this.world.getLargestBlockIntersection(this.boundingBox.shrink(0.001D), Material.FIRE);
+            if (firePos != null) {
+                org.bukkit.block.Block fireBlock = this.bukkitEntity.getWorld().getBlockAt(firePos.getX(), firePos.getY(), firePos.getZ());
+                try {
+                    CraftEventFactory.blockDamage = fireBlock;
+                    this.burn(1);
+                } finally {
+                    CraftEventFactory.blockDamage = null;
+                }
+
                 if (!flag1) {
-                    ++this.fireTicks;
-                    if (this.fireTicks == 0) {
-                        this.setOnFire(8);
+                    EntityCombustByBlockEvent event = new EntityCombustByBlockEvent(fireBlock, this.getBukkitEntity(), 8);
+                    this.world.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled()) {
+                        // Note carefully how this works: when fireTicks is negative, the entity is
+                        // "heating up" but not on fire yet. When fireTicks reaches 0, the entity
+                        // "ignites" and fireTicks jumps to 160. It will then stay at that value as
+                        // long as the player remains in fire (because the ++ below will cancel out
+                        // the -- in the entity tick). For the event cancelling to work, it has to
+                        // be fired every tick, thus we cannot avoid "spamming" it.
+                        ++this.fireTicks;
+                        if (this.fireTicks == 0) {
+                            this.setOnFire(event.getDuration());
+                        }
+                        // SportBukkit end
                     }
                 }
             } else if (this.fireTicks <= 0) {
@@ -714,6 +929,15 @@
                 this.fireTicks = -this.getMaxFireTicks();
             }
 
+            // SportBukkit start
+            if(this.fireTicks > 0) {
+                this.wasOnFire = true;
+            } else if(this.wasOnFire && this.fireTicks <= 0) {
+                this.wasOnFire = false;
+                this.world.getServer().getPluginManager().callEvent(new EntityExtinguishEvent(this.getBukkitEntity()));
+            }
+            // SportBukkit end
+
             this.world.methodProfiler.b();
         }
     }
@@ -834,7 +1058,7 @@
         return null;
     }
 
-    protected void burn(int i) {
+    protected void burn(float i) { // CraftBukkit - int -> float
         if (!this.fireProof) {
             this.damageEntity(DamageSource.FIRE, (float) i);
         }
@@ -882,7 +1106,7 @@
         return this.world.a(this.getBoundingBox().grow(0.0D, -20.0D, 0.0D).shrink(0.001D), Material.WATER, this);
     }
 
-    public boolean aq() {
+    public boolean aq() { // SportBukkit - method overridden in EntityTNTPrimed (use this comment to find the base method if it gets renamed)
         if (this.bJ() instanceof EntityBoat) {
             this.inWater = false;
         } else if (this.world.a(this.getBoundingBox().grow(0.0D, -0.4000000059604645D, 0.0D).shrink(0.001D), Material.WATER, this)) {
@@ -974,6 +1198,12 @@
         return this.world.a(this.getBoundingBox().grow(-0.10000000149011612D, -0.4000000059604645D, -0.10000000149011612D), Material.LAVA);
     }
 
+    // SportBukkit start
+    public @Nullable BlockPosition insideLavaBlockPosition() {
+        return this.world.getLargestBlockIntersection(this.getBoundingBox().grow(-0.1, -0.4, -0.1), Material.LAVA);
+    }
+    // SportBukkit end
+
     public void b(float f, float f1, float f2, float f3) {
         float f4 = f * f + f1 * f1 + f2 * f2;
 
@@ -1008,6 +1238,13 @@
     }
 
     public void spawnIn(World world) {
+        // CraftBukkit start
+        if (world == null) {
+            die();
+            this.world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+            return;
+        }
+        // CraftBukkit end
         this.world = world;
     }
 
@@ -1099,6 +1336,7 @@
     public void d(EntityHuman entityhuman) {}
 
     public void collide(Entity entity) {
+        if(!this.isCollidable() || !entity.isCollidable()) return; // SportBukkit
         if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1134,13 +1372,41 @@
         }
     }
 
-    public void f(double d0, double d1, double d2) {
-        this.motX += d0;
-        this.motY += d1;
-        this.motZ += d2;
+    // SportBukkit start - velocity API
+    public double knockbackScale() {
+        return 1D - getBukkitEntity().getKnockbackReduction();
+    }
+
+    public void applyKnockback(Entity attacker, Vec3D impulse, boolean client) {
+        if(impulse != null) {
+            applyKnockback(attacker, impulse.x, impulse.y, impulse.z, client);
+        }
+    }
+
+    public void applyKnockback(Entity attacker, double x, double y, double z, boolean client) {
+        final double d = knockbackScale();
+        applyImpulse(d * x, d * y, d * z, client);
+    }
+
+    public void applyImpulse(double x, double y, double z, boolean client) {
+        setVelocity(this.motX + x, this.motY + y, this.motZ + z);
+    }
+
+    public void setVelocity(double x, double y, double z) {
+        if(x == this.motX && y == this.motY && z == this.motZ) return;
+
+        this.motX = x;
+        this.motY = y;
+        this.motZ = z;
+        this.velocityChanged = true;
         this.impulse = true;
     }
 
+    public void f(double d0, double d1, double d2) {
+        applyImpulse(d0, d1, d2, false);
+    }
+    // SportBukkit end
+
     protected void ax() {
         this.velocityChanged = true;
     }
@@ -1245,6 +1511,18 @@
         try {
             nbttagcompound.set("Pos", this.a(new double[] { this.locX, this.locY, this.locZ}));
             nbttagcompound.set("Motion", this.a(new double[] { this.motX, this.motY, this.motZ}));
+
+            // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+            // TODO: make sure this is the best way to address this.
+            if (Float.isNaN(this.yaw)) {
+                this.yaw = 0;
+            }
+
+            if (Float.isNaN(this.pitch)) {
+                this.pitch = 0;
+            }
+            // CraftBukkit end
+
             nbttagcompound.set("Rotation", this.a(new float[] { this.yaw, this.pitch}));
             nbttagcompound.setFloat("FallDistance", this.fallDistance);
             nbttagcompound.setShort("Fire", (short) this.fireTicks);
@@ -1254,6 +1532,12 @@
             nbttagcompound.setBoolean("Invulnerable", this.invulnerable);
             nbttagcompound.setInt("PortalCooldown", this.portalCooldown);
             nbttagcompound.a("UUID", this.getUniqueID());
+            // CraftBukkit start
+            // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+            nbttagcompound.setLong("WorldUUIDLeast", this.world.getDataManager().getUUID().getLeastSignificantBits());
+            nbttagcompound.setLong("WorldUUIDMost", this.world.getDataManager().getUUID().getMostSignificantBits());
+            nbttagcompound.setInt("Bukkit.updateLevel", CURRENT_LEVEL);
+            // CraftBukkit end
             if (this.hasCustomName()) {
                 nbttagcompound.setString("CustomName", this.getCustomName());
             }
@@ -1329,6 +1613,8 @@
             this.motX = nbttaglist1.f(0);
             this.motY = nbttaglist1.f(1);
             this.motZ = nbttaglist1.f(2);
+
+            /* CraftBukkit start - Moved section down
             if (Math.abs(this.motX) > 10.0D) {
                 this.motX = 0.0D;
             }
@@ -1340,6 +1626,7 @@
             if (Math.abs(this.motZ) > 10.0D) {
                 this.motZ = 0.0D;
             }
+            // CraftBukkit end */
 
             this.locX = nbttaglist.f(0);
             this.locY = nbttaglist.f(1);
@@ -1397,6 +1684,57 @@
                 this.setPosition(this.locX, this.locY, this.locZ);
             }
 
+            // CraftBukkit start
+            if (this instanceof EntityLiving) {
+                EntityLiving entity = (EntityLiving) this;
+
+                // Reset the persistence for tamed animals
+                if (entity instanceof EntityTameableAnimal && !isLevelAtLeast(nbttagcompound, 2) && !nbttagcompound.getBoolean("PersistenceRequired")) {
+                    EntityInsentient entityinsentient = (EntityInsentient) entity;
+                    entityinsentient.persistent = !entityinsentient.isTypeNotPersistent();
+                }
+            }
+            // CraftBukkit end
+
+            // CraftBukkit start
+            double limit = getBukkitEntity() instanceof Vehicle ? 100.0D : 10.0D;
+            if (Math.abs(this.motX) > limit) {
+                this.motX = 0.0D;
+            }
+
+            if (Math.abs(this.motY) > limit) {
+                this.motY = 0.0D;
+            }
+
+            if (Math.abs(this.motZ) > limit) {
+                this.motZ = 0.0D;
+            }
+            // CraftBukkit end
+
+            // CraftBukkit start - Reset world
+            if (this instanceof EntityPlayer) {
+                Server server = Bukkit.getServer();
+                org.bukkit.World bworld = null;
+
+                // TODO: Remove World related checks, replaced with WorldUID
+                String worldName = nbttagcompound.getString("world");
+
+                if (nbttagcompound.hasKey("WorldUUIDMost") && nbttagcompound.hasKey("WorldUUIDLeast")) {
+                    UUID uid = new UUID(nbttagcompound.getLong("WorldUUIDMost"), nbttagcompound.getLong("WorldUUIDLeast"));
+                    bworld = server.getWorld(uid);
+                } else {
+                    bworld = server.getWorld(worldName);
+                }
+
+                if (bworld == null) {
+                    EntityPlayer entityPlayer = (EntityPlayer) this;
+                    bworld = ((org.bukkit.craftbukkit.CraftServer) server).getServer().getWorldServer(entityPlayer.dimension).getWorld();
+                }
+
+                spawnIn(bworld == null? null : ((CraftWorld) bworld).getHandle());
+            }
+            // CraftBukkit end
+
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Loading entity NBT");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being loaded");
@@ -1464,6 +1802,12 @@
         if (itemstack.isEmpty()) {
             return null;
         } else {
+            // CraftBukkit start - Capture drops for death event
+            if (this instanceof EntityLiving && !((EntityLiving) this).forceDrops) {
+                ((EntityLiving) this).drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack));
+                return null;
+            }
+            // CraftBukkit end
             EntityItem entityitem = new EntityItem(this.world, this.locX, this.locY + (double) f, this.locZ, itemstack);
 
             entityitem.q();
@@ -1554,6 +1898,30 @@
         if (!flag && (!this.n(entity) || !entity.q(this))) {
             return false;
         } else {
+            // CraftBukkit start
+            com.google.common.base.Preconditions.checkState(!getPassengers().contains(entity), "Circular entity riding! %s %s", entity, this);
+
+            CraftEntity craft = (CraftEntity) getBukkitEntity().getVehicle();
+            Entity orig = craft == null ? null : craft.getHandle();
+            if (entity.getBukkitEntity() instanceof Vehicle && getBukkitEntity() instanceof LivingEntity) {
+                VehicleEnterEvent event = new VehicleEnterEvent(
+                        (Vehicle) entity.getBukkitEntity(),
+                        getBukkitEntity()
+                );
+                Bukkit.getPluginManager().callEvent(event);
+                if(getBukkitEntity() instanceof Player) {
+                    final Player player = (Player) getBukkitEntity();
+                    final EntityLocation newLocation = player.getEntityLocation();
+                    newLocation.copyLocation(entity.getBukkitEntity().getLocation());
+                    CraftEventFactory.callPlayerPoseFlagEvent(player, PoseFlag.RIDING, true, newLocation, event);
+                }
+                CraftEntity craftn = (CraftEntity) getBukkitEntity().getVehicle();
+                Entity n = craftn == null ? null : craftn.getHandle();
+                if (event.isCancelled() || n != orig) {
+                    return false;
+                }
+            }
+            // CraftBukkit end
             if (this.isPassenger()) {
                 this.stopRiding();
             }
@@ -1568,6 +1936,7 @@
         return this.j <= 0;
     }
 
+    public void ejectAllPassengers() { this.ejectPassengers(); } // SportBukkit - alias for following method
     public void ejectPassengers() {
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
             ((Entity) this.passengers.get(i)).stopRiding();
@@ -1577,6 +1946,25 @@
 
     public void stopRiding() {
         if (this.au != null) {
+            // CraftBukkit start
+            CraftEntity craft = (CraftEntity) getBukkitEntity().getVehicle();
+            Entity orig = craft == null ? null : craft.getHandle();
+            if (this.getRiding().getBukkitEntity() instanceof Vehicle && getBukkitEntity() instanceof LivingEntity && world.isChunkLoaded((int) locX >> 4, (int) locZ >> 4, false)) { // Boolean not used
+                VehicleExitEvent event = new VehicleExitEvent(
+                        (Vehicle) this.getRiding().getBukkitEntity(),
+                        (LivingEntity) getBukkitEntity()
+                );
+                Bukkit.getPluginManager().callEvent(event);
+                if(getBukkitEntity() instanceof Player) {
+                    CraftEventFactory.callPlayerPoseFlagEvent((Player) getBukkitEntity(), PoseFlag.RIDING, false, event);
+                }
+                CraftEntity craftn = (CraftEntity) getBukkitEntity().getVehicle();
+                Entity n = craftn == null ? null : craftn.getHandle();
+                if (event.isCancelled() || n != orig) {
+                    return;
+                }
+            }
+            // CraftBukkit end
             Entity entity = this.au;
 
             this.au = null;
@@ -1741,14 +2129,49 @@
     }
 
     public void setAirTicks(int i) {
-        this.datawatcher.set(Entity.aA, Integer.valueOf(i));
+        // CraftBukkit start
+        EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), i);
+        event.getEntity().getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        this.datawatcher.set(Entity.aA, Integer.valueOf(event.getAmount()));
+        // CraftBukkit end
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
-        this.damageEntity(DamageSource.LIGHTNING, 5.0F);
+        // CraftBukkit start
+        final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+        final org.bukkit.entity.Entity stormBukkitEntity = entitylightning.getBukkitEntity();
+        final PluginManager pluginManager = Bukkit.getPluginManager();
+
+        if (thisBukkitEntity instanceof Hanging) {
+            HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
+            pluginManager.callEvent(hangingEvent);
+
+            if (hangingEvent.isCancelled()) {
+                return;
+            }
+        }
+
+        if (this.fireProof) {
+            return;
+        }
+        CraftEventFactory.entityDamage = entitylightning;
+        if (!this.damageEntity(DamageSource.LIGHTNING, 5.0F)) {
+            CraftEventFactory.entityDamage = null;
+            return;
+        }
+        // CraftBukkit end
         ++this.fireTicks;
         if (this.fireTicks == 0) {
-            this.setOnFire(8);
+            // CraftBukkit start - Call a combust event when lightning strikes
+            EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+            pluginManager.callEvent(entityCombustEvent);
+            if (!entityCombustEvent.isCancelled()) {
+                this.setOnFire(entityCombustEvent.getDuration());
+            }
+            // CraftBukkit end
         }
 
     }
@@ -1893,19 +2316,76 @@
         if (!this.world.isClientSide && !this.dead) {
             this.world.methodProfiler.a("changeDimension");
             MinecraftServer minecraftserver = this.C_();
-            int j = this.dimension;
-            WorldServer worldserver = minecraftserver.getWorldServer(j);
-            WorldServer worldserver1 = minecraftserver.getWorldServer(i);
+            // CraftBukkit start - Move logic into new function "teleportTo(Location,boolean)"
+            // int j = this.dimension;
+            // WorldServer worldserver = minecraftserver.getWorldServer(j);
+            // WorldServer worldserver1 = minecraftserver.getWorldServer(i);
+            WorldServer exitWorld = null;
+            if (this.dimension < CraftWorld.CUSTOM_DIMENSION_OFFSET) { // Plugins must specify exit from custom Bukkit worlds
+                // Only target existing worlds (compensate for allow-nether/allow-end as false)
+                for (WorldServer world : minecraftserver.worlds) {
+                    if (world.dimension == i) {
+                        exitWorld = world;
+                    }
+                }
+            }
+
+            BlockPosition blockposition = null; // PAIL: CHECK
+            Location enter = this.getBukkitEntity().getLocation();
+            Location exit;
+            if (exitWorld != null) {
+                if (blockposition != null) {
+                    exit = new Location(exitWorld.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
+                } else {
+                    exit = minecraftserver.getPlayerList().calculateTarget(enter, minecraftserver.getWorldServer(i));
+                }
+            }
+            else {
+                exit = null;
+            }
+            boolean useTravelAgent = exitWorld != null && !(this.dimension == 1 && exitWorld.dimension == 1); // don't use agent for custom worlds or return from THE_END
+
+            TravelAgent agent = exit != null ? (TravelAgent) ((CraftWorld) exit.getWorld()).getHandle().getTravelAgent() : org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT; // return arbitrary TA to compensate for implementation dependent plugins
+            boolean oldCanCreate = agent.getCanCreatePortal();
+            agent.setCanCreatePortal(false); // General entities cannot create portals
+
+            EntityPortalEvent event = new EntityPortalEvent(this.getBukkitEntity(), enter, exit, agent);
+            event.useTravelAgent(useTravelAgent);
+            event.getEntity().getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !this.isAlive()) {
+                agent.setCanCreatePortal(oldCanCreate);
+                return null;
+            }
+            exit = event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo();
+            agent.setCanCreatePortal(oldCanCreate);
+
+            // Need to make sure the profiler state is reset afterwards (but we still want to time the call)
+            Entity entity = this.teleportTo(exit, true);
+            this.world.methodProfiler.b();
+            return entity;
+        }
+        return null;
+    }
+
+    public Entity teleportTo(Location exit, boolean portal) {
+        if (true) {
+            WorldServer worldserver = ((CraftWorld) getBukkitEntity().getLocation().getWorld()).getHandle();
+            WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
+            int i = worldserver1.dimension;
+            // CraftBukkit end
 
             this.dimension = i;
+            /* CraftBukkit start - TODO: Check if we need this
             if (j == 1 && i == 1) {
                 worldserver1 = minecraftserver.getWorldServer(0);
                 this.dimension = 0;
             }
+            // CraftBukkit end */
 
             this.world.kill(this);
             this.dead = false;
             this.world.methodProfiler.a("reposition");
+            /* CraftBukkit start - Handled in calculateTarget
             BlockPosition blockposition;
 
             if (i == 1) {
@@ -1934,12 +2414,18 @@
                 blockposition = new BlockPosition(this);
             }
 
-            worldserver.entityJoinedWorld(this, false);
+            // CraftBukkit end */
+            // CraftBukkit start - Ensure chunks are loaded in case TravelAgent is not used which would initially cause chunks to load during find/create
+            // minecraftserver.getPlayerList().changeWorld(this, j, worldserver, worldserver1);
+            worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal);
+            // worldserver.entityJoinedWorld(this, false); // Handled in repositionEntity
+            // CraftBukkit end
             this.world.methodProfiler.c("reloading");
             Entity entity = EntityTypes.a(this.getClass(), (World) worldserver1);
 
             if (entity != null) {
                 entity.a(this);
+                /* CraftBukkit start - We need to do this...
                 if (j == 1 && i == 1) {
                     BlockPosition blockposition1 = worldserver1.q(worldserver1.getSpawn());
 
@@ -1947,6 +2433,7 @@
                 } else {
                     entity.setPositionRotation(blockposition, entity.yaw, entity.pitch);
                 }
+                // CraftBukkit end */
 
                 boolean flag = entity.attachedToPlayer;
 
@@ -1954,13 +2441,21 @@
                 worldserver1.addEntity(entity);
                 entity.attachedToPlayer = flag;
                 worldserver1.entityJoinedWorld(entity, false);
+                // CraftBukkit start - Forward the CraftEntity to the new entity
+                this.getBukkitEntity().setHandle(entity);
+                entity.bukkitEntity = this.getBukkitEntity();
+
+                if (this instanceof EntityInsentient) {
+                    ((EntityInsentient)this).unleash(true, false); // Unleash to prevent duping of leads.
+                }
+                // CraftBukkit end
             }
 
             this.dead = true;
             this.world.methodProfiler.b();
             worldserver.m();
             worldserver1.m();
-            this.world.methodProfiler.b();
+            // this.world.methodProfiler.b(); // CraftBukkit: Moved up to keep balanced
             return entity;
         } else {
             return null;
@@ -2064,6 +2559,11 @@
     }
 
     public void setCustomName(String s) {
+        // CraftBukkit start - Add a sane limit for name length
+        if (s.length() > 256) {
+            s = s.substring(0, 256);
+        }
+        // CraftBukkit end
         this.datawatcher.set(Entity.aB, s);
     }
 
@@ -2121,7 +2621,26 @@
     }
 
     public void a(AxisAlignedBB axisalignedbb) {
-        this.boundingBox = axisalignedbb;
+        // CraftBukkit start - block invalid bounding boxes
+        double a = axisalignedbb.a,
+                b = axisalignedbb.b,
+                c = axisalignedbb.c,
+                d = axisalignedbb.d,
+                e = axisalignedbb.e,
+                f = axisalignedbb.f;
+        double len = axisalignedbb.d - axisalignedbb.a;
+        if (len < 0) d = a;
+        if (len > 64) d = a + 64.0;
+
+        len = axisalignedbb.e - axisalignedbb.b;
+        if (len < 0) e = b;
+        if (len > 64) e = b + 64.0;
+
+        len = axisalignedbb.f - axisalignedbb.c;
+        if (len < 0) f = c;
+        if (len > 64) f = c + 64.0;
+        this.boundingBox = new AxisAlignedBB(a, b, c, d, e, f);
+        // CraftBukkit end
     }
 
     public float getHeadHeight() {
@@ -2252,9 +2771,13 @@
 
     @Nullable
     public Entity bE() {
-        return null;
+        // SportBukkit start
+        final List<Entity> passengers = getPassengers();
+        return passengers.isEmpty() ? null : passengers.get(0);
+        // SportBukkit end
     }
 
+    public List<Entity> getPassengers() { return bF(); } // SportBukkit - alias
     public List<Entity> bF() {
         return (List) (this.passengers.isEmpty() ? Collections.emptyList() : Lists.newArrayList(this.passengers));
     }
@@ -2295,7 +2818,7 @@
         for (Iterator iterator = this.bF().iterator(); iterator.hasNext(); entity.a(oclass, set)) {
             entity = (Entity) iterator.next();
             if (oclass.isAssignableFrom(entity.getClass())) {
-                set.add(entity);
+                set.add((T) entity); // CraftBukkit - decompile error
             }
         }
 
@@ -2341,6 +2864,8 @@
     }
 
     @Nullable
+    Entity getRiding() { return this.bJ(); } // SportBukkit - alias for following method
+    @Nullable
     public Entity bJ() {
         return this.au;
     }
