--- a/net/minecraft/server/DataWatcher.java
+++ b/net/minecraft/server/DataWatcher.java
@@ -70,7 +70,7 @@
         }
     }
 
-    public <T> void register(DataWatcherObject<T> datawatcherobject, T t0) {
+    public <T> void register(DataWatcherObject<T> datawatcherobject, Object t0) { // CraftBukkit T -> Object
         int i = datawatcherobject.a();
 
         if (i > 254) {
@@ -84,7 +84,7 @@
         }
     }
 
-    private <T> void registerObject(DataWatcherObject<T> datawatcherobject, T t0) {
+    private <T> void registerObject(DataWatcherObject<T> datawatcherobject, Object t0) { // CraftBukkit Object
         DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
 
         this.e.writeLock().lock();
@@ -231,7 +231,12 @@
 
         short short0;
 
-        while ((short0 = packetdataserializer.readUnsignedByte()) != 255) {
+        // SportBukkit start - Java 8 bytecode verifier doesn't like the inline assignment, no clue why
+        for(;;) {
+            short0 = packetdataserializer.readUnsignedByte();
+            if(short0 == 255) break;
+            // SportBukkit end
+
             if (arraylist == null) {
                 arraylist = Lists.newArrayList();
             }
@@ -302,5 +307,30 @@
         public DataWatcher.Item<T> d() {
             return new DataWatcher.Item(this.a, this.a.b().a(this.b));
         }
+
+        // SportBukkit start - Make an independent copy of the item
+        public Item<T> deepCopy() {
+            T value = this.b();
+
+            // All the metadata types are immutable except ItemStack, which we have to clone.
+            if(value instanceof ItemStack) {
+                value = (T) ((ItemStack) value).cloneItemStack();
+            }
+
+            final Item<T> copy = new Item<>(this.a(), value);
+            copy.a(this.c());
+            return copy;
+        }
+        // SportBukkit end
+    }
+
+    // SportBukkit start - Copy all items in the given list in-place
+    public static void deepCopy(List<Item<?>> items) {
+        if(items == null) return;
+
+        for(int j = 0; j < items.size(); j++) {
+            items.set(j, items.get(j).deepCopy());
+        }
     }
+    // SportBukkit end
 }
