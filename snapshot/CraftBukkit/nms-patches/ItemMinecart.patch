--- a/net/minecraft/server/ItemMinecart.java
+++ b/net/minecraft/server/ItemMinecart.java
@@ -1,5 +1,11 @@
 package net.minecraft.server;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.event.block.BlockDispenseEntityEvent;
+// CraftBukkit end
+
 public class ItemMinecart extends Item {
 
     private static final IDispenseBehavior a = new DispenseBehaviorItem() {
@@ -37,14 +43,44 @@
                 }
             }
 
-            EntityMinecartAbstract entityminecartabstract = EntityMinecartAbstract.a(world, d0, d1 + d3, d2, ((ItemMinecart) itemstack.getItem()).b);
+            // CraftBukkit start
+            // EntityMinecartAbstract entityminecartabstract = EntityMinecartAbstract.a(world, d0, d1 + d3, d2, ((ItemMinecart) itemstack.getItem()).b);
+            ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
+            org.bukkit.block.Block block2 = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+            EntityMinecartAbstract entityminecartabstract = EntityMinecartAbstract.a(world, d0, d1 + d3, d2, ((ItemMinecart) itemstack1.getItem()).b);
+            BlockDispenseEntityEvent event = new BlockDispenseEntityEvent(block2, craftItem.clone(), entityminecartabstract.getBukkitEntity());
+            if (!BlockDispenser.eventFired) {
+                world.getServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+                itemstack.add(1);
+                return itemstack;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+                itemstack.add(1);
+                // Chain to handler for new item
+                ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
+                    idispensebehavior.a(isourceblock, eventStack);
+                    return itemstack;
+                }
+            }
+
+            entityminecartabstract.getBukkitEntity().setLocationDirect(event.getLocation());
+            entityminecartabstract.getBukkitEntity().setVelocity(event.getVelocity());
 
             if (itemstack.hasName()) {
                 entityminecartabstract.setCustomName(itemstack.getName());
             }
 
-            world.addEntity(entityminecartabstract);
-            itemstack.subtract(1);
+            if (!world.addEntity(entityminecartabstract)) itemstack.add(1);
+            // itemstack.subtract(1); // CraftBukkit - handled during event processing
+            // CraftBukkit end
             return itemstack;
         }
 
@@ -83,7 +119,7 @@
                     entityminecartabstract.setCustomName(itemstack.getName());
                 }
 
-                world.addEntity(entityminecartabstract);
+                if (!world.addEntity(entityminecartabstract)) return EnumInteractionResult.PASS; // CraftBukkit
             }
 
             itemstack.subtract(1);
