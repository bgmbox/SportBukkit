From 6c88e23d66d91f006c25cf22e58a9ec8c62c93cb Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 17 Jan 2017 07:10:14 -0500
Subject: [PATCH] SportBukkit


diff --git a/README.md b/README.md
index 761988b..ec5f2dd 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-CraftBukkit
+SportBukkit
 ======
 An implementation of the [Bukkit](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/bukkit) plugin API for [Minecraft](https://minecraft.net/) servers, currently maintained by [SpigotMC](http://www.spigotmc.org/).
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 65ede80..4569008 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -176,6 +176,11 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
             try {
                 this.an().a(inetaddress, this.P());
+                // SportBukkit start
+                if(this.getServerConnection().localAddress().getPort() != this.getConfiguredPort()) {
+                    DedicatedServer.LOGGER.info("Bound to port " + this.getServerConnection().localAddress().getPort());
+                }
+                // SportBukkit end
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
                 DedicatedServer.LOGGER.warn("The exception was: {}", ioexception.toString());
@@ -288,7 +293,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     watchdogThread = thread1; // SportBukkit
                 }
 
-                Items.a.a(CreativeModeTab.g, NonNullList.a());
                 return true;
             }
         }
@@ -402,6 +406,10 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         super.processTasks();
         processCommands();
     }
+
+    public DataConverterManager getDataConverterManager() {
+        return this.dataConverterManager;
+    }
     // SportBukkit end
 
     public void processCommands() { aP(); } // SportBukkit - alias
@@ -466,7 +474,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public int e_() {
-        return this.P();
+        return getServerConnection().localAddress().getPort(); // SportBukkit - return dynamic port, if set, otherwise configured port
     }
 
     public String f_() {
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index e497faf..ca6f57d 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -16,7 +16,7 @@ import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import com.google.common.base.Preconditions;
 import org.bukkit.Bukkit;
-import org.bukkit.CraftLogging;
+import org.bukkit.craftbukkit.CraftLogging;
 import org.bukkit.GameMode;
 import org.bukkit.WeatherType;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -1708,10 +1708,4 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
     // CraftBukkit end
 
-    // SportBukkit start - use custom scoreboard
-    @Override
-    public Scoreboard getScoreboard() {
-        return getBukkitEntity().getScoreboard().getHandle();
-    }
-    // SportBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 6f15513..0e3f4ee 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -296,6 +296,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
                 world.a(worldsettings);
                 this.server.scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(this, world.getScoreboard());
+                this.server.overworld = world;
             } else {
                 String dim = "DIM" + dimension;
 
@@ -1190,6 +1191,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         return this.I;
     }
 
+    public int getConfiguredPort() { return this.P(); } // SportBukkit - alias for following method
     public int P() {
         return this.u;
     }
@@ -1420,6 +1422,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
     }
 
+    public ServerConnection getServerConnection() { return this.an(); } // SportBukkit - alias for following method
     public ServerConnection an() {
         return this.p;
     }
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index 351bd4e..877d6eb 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -6,6 +6,8 @@ import io.netty.channel.ChannelFutureListener;
 import java.net.InetSocketAddress;
 import java.util.Iterator;
 
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.protocol.CraftServerPing;
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.entity.Player;
 
@@ -110,7 +112,7 @@ public class PacketStatusListener implements PacketStatusInListener {
             ServerPing.ServerPingPlayerSample playerSample = new ServerPing.ServerPingPlayerSample(event.getMaxPlayers(), profiles.size());
             playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
 
-            ServerPing ping = new ServerPing();
+            CraftServerPing ping = new CraftServerPing();
             ping.setFavicon(event.icon.value);
             ping.setMOTD(new ChatComponentText(event.getMotd()));
             ping.setPlayerSample(playerSample);
diff --git a/src/main/java/net/minecraft/server/PacketStatusOutServerInfo.java b/src/main/java/net/minecraft/server/PacketStatusOutServerInfo.java
index 8245cb5..4811435 100644
--- a/src/main/java/net/minecraft/server/PacketStatusOutServerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketStatusOutServerInfo.java
@@ -2,12 +2,16 @@ package net.minecraft.server;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import org.bukkit.craftbukkit.protocol.CraftServerPing;
 import java.io.IOException;
 
 public class PacketStatusOutServerInfo implements Packet<PacketStatusOutListener> {
 
-    private static final Gson a = (new GsonBuilder()).registerTypeAdapter(ServerPing.ServerData.class, new ServerPing.Serializer()).registerTypeAdapter(ServerPing.ServerPingPlayerSample.class, new ServerPing.Serializer()).registerTypeAdapter(ServerPing.class, new ServerPing.Serializer()).registerTypeHierarchyAdapter(IChatBaseComponent.class, new IChatBaseComponent.ChatSerializer()).registerTypeHierarchyAdapter(ChatModifier.class, new ChatModifier.ChatModifierSerializer()).registerTypeAdapterFactory(new ChatTypeAdapterFactory()).create();
-    private ServerPing b;
+    // SportBukkit start - add CraftServerPing.Serializer
+    private static final Gson a = (new GsonBuilder()).registerTypeAdapter(ServerPing.ServerData.class, new ServerPing.ServerData.Serializer()).registerTypeAdapter(ServerPing.ServerPingPlayerSample.class, new ServerPing.ServerPingPlayerSample.Serializer()).registerTypeAdapter(ServerPing.class, new ServerPing.Serializer()).registerTypeHierarchyAdapter(IChatBaseComponent.class, new IChatBaseComponent.ChatSerializer()).registerTypeHierarchyAdapter(ChatModifier.class, new ChatModifier.ChatModifierSerializer()).registerTypeAdapterFactory(new ChatTypeAdapterFactory())
+            .registerTypeAdapter(CraftServerPing.class, new CraftServerPing.Serializer())
+            .create();
+   private ServerPing b;
 
     public PacketStatusOutServerInfo() {}
 
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 79eeee3..84c65e3 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -64,6 +64,21 @@ public class ServerConnection {
     private final List<NetworkManager> h = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
     // SportBukkit end
 
+    // SportBukkit start
+        private java.net.InetSocketAddress localAddress;
+    public java.net.InetSocketAddress localAddress() {
+        if(localAddress != null) {
+            // If connected, return bound address (with potentially dynamic port)
+            return localAddress;
+        } else {
+            // If not connected yet, return configured address and port (which may be 0)
+            return java.net.InetSocketAddress.createUnresolved(this.f.getServerIp(),
+                    this.f.getConfiguredPort());
+        }
+    }
+    // SportBukkit end
+
+
     public ServerConnection(MinecraftServer minecraftserver) {
         this.f = minecraftserver;
         this.d = true;
@@ -103,6 +118,8 @@ public class ServerConnection {
                     f.server.eventBus().callEvent(new org.bukkit.craftbukkit.event.AsyncClientConnectEvent(channel, networkmanager)); // SportBukkit
                 }
             }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+
+            this.localAddress = (java.net.InetSocketAddress) this.g.get(0).channel().localAddress(); // SportBukkit
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 7a24ad1..290b32b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -18,7 +18,7 @@ import javax.annotation.Nullable;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import org.bukkit.Bukkit;
-import org.bukkit.CraftLogging;
+import org.bukkit.craftbukkit.CraftLogging;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index d6eff92..d72c345 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -191,6 +191,14 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     }
 
     // CraftBukkit start
+    public File getPlayerFile(UUID id) {
+        return new File(this.playerDir, id + ".dat");
+    }
+
+    public boolean hasPlayerData(UUID id) {
+        return getPlayerFile(id).isFile();
+    }
+
     public NBTTagCompound getPlayerData(String s) {
         try {
             File file1 = new File(this.playerDir, s + ".dat");
diff --git a/src/main/java/org/bukkit/CraftLogging.java b/src/main/java/org/bukkit/CraftLogging.java
deleted file mode 100644
index 8d03955..0000000
--- a/src/main/java/org/bukkit/CraftLogging.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package org.bukkit;
-
-import net.minecraft.server.CrashReport;
-import net.minecraft.server.CrashReportSystemDetails;
-
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-public class CraftLogging {
-
-    public static void crashReport(CrashReport report) {
-        crashReport(report, Bukkit.getLogger());
-    }
-
-    public static void crashReport(CrashReport report, Logger logger) {
-        final StringBuilder text = new StringBuilder();
-        for(CrashReportSystemDetails extra : report.extras()) {
-            extra.a(text);
-        }
-        report.details().a(text);
-        logger.log(Level.SEVERE, "Exception while " + report.activity() + "\n\n" + text, report.exception());
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftLogging.java b/src/main/java/org/bukkit/craftbukkit/CraftLogging.java
new file mode 100644
index 0000000..e5a8d8c
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftLogging.java
@@ -0,0 +1,24 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.server.CrashReport;
+import net.minecraft.server.CrashReportSystemDetails;
+import org.bukkit.Bukkit;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class CraftLogging {
+
+    public static void crashReport(CrashReport report) {
+        crashReport(report, Bukkit.getLogger());
+    }
+
+    public static void crashReport(CrashReport report, Logger logger) {
+        final StringBuilder text = new StringBuilder();
+        for(CrashReportSystemDetails extra : report.extras()) {
+            extra.a(text);
+        }
+        report.details().a(text);
+        logger.log(Level.SEVERE, "Exception while " + report.activity() + "\n\n" + text, report.exception());
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index b4ca640..26f0993 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -2,9 +2,11 @@ package org.bukkit.craftbukkit;
 
 import com.mojang.authlib.GameProfile;
 import java.io.File;
+import java.time.Instant;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.UUID;
 
 import net.minecraft.server.EntityPlayer;
@@ -21,18 +23,34 @@ import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.entity.Player;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
+import tc.oc.collection.Optionals;
+
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable {
     private final GameProfile profile;
     private final CraftServer server;
     private final WorldNBTStorage storage;
+    private final Optional<Instant> updatedAt;
 
     protected CraftOfflinePlayer(CraftServer server, GameProfile profile) {
+        this(server, profile, Optional.empty());
+    }
+
+    protected CraftOfflinePlayer(CraftServer server, GameProfile profile, Optional<Instant> updatedAt) {
+        checkNotNull(profile.getId(), "OfflinePlayer must have a UUID");
+        checkArgument(!(updatedAt.isPresent() && profile.getName() == null), "OfflinePlayer has an update timestamp, but no username");
         this.server = server;
         this.profile = profile;
-        this.storage = (WorldNBTStorage) (server.console.worlds.get(0).getDataManager());
+        this.updatedAt = updatedAt;
+        this.storage = (WorldNBTStorage) (server.overworld.getDataManager());
+    }
 
+    @Override
+    public Optional<Instant> updatedAt() {
+        return Optionals.first(lastPlayedAt(), updatedAt);
     }
 
     public GameProfile getProfile() {
@@ -195,6 +213,12 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return new File(storage.getPlayerDir(), getUniqueId() + ".dat");
     }
 
+    @Override
+    public Optional<Instant> lastPlayedAt() {
+        final long milli = getLastPlayed();
+        return milli == 0 ? Optional.empty() : Optional.of(Instant.ofEpochMilli(milli));
+    }
+
     public long getFirstPlayed() {
         Player player = getPlayer();
         if (player != null) return player.getFirstPlayed();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayerFactory.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayerFactory.java
new file mode 100644
index 0000000..2394dc9
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayerFactory.java
@@ -0,0 +1,54 @@
+package org.bukkit.craftbukkit;
+
+import com.mojang.authlib.GameProfile;
+import org.bukkit.craftbukkit.CraftOfflinePlayer;
+import org.bukkit.craftbukkit.CraftServer;
+import tc.oc.minecraft.api.user.User;
+import tc.oc.minecraft.api.user.UserFactory;
+import tc.oc.minecraft.api.user.UserUtils;
+
+import javax.inject.Inject;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+import java.time.Instant;
+import java.util.Optional;
+import java.util.UUID;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+@Singleton
+public class CraftOfflinePlayerFactory implements UserFactory {
+
+    private final Provider<CraftServer> server;
+
+    @Inject
+    CraftOfflinePlayerFactory(Provider<CraftServer> server) {
+        this.server = server;
+    }
+
+    public CraftOfflinePlayer createUser(GameProfile profile, Optional<Instant> updatedAt) {
+        return new CraftOfflinePlayer(server.get(), profile, updatedAt);
+    }
+
+    @Override
+    public CraftOfflinePlayer createUser(UUID id) {
+        return createUser(new GameProfile(checkNotNull(id), null), Optional.empty());
+    }
+
+    @Override
+    public CraftOfflinePlayer createUser(String name) {
+        return createUser(new GameProfile(UserUtils.offlinePlayerId(name), name), Optional.empty());
+    }
+
+    @Override
+    public CraftOfflinePlayer createUser(UUID id, String name, Instant updatedAt) {
+        return createUser(new GameProfile(checkNotNull(id), checkNotNull(name)), Optional.of(updatedAt));
+    }
+
+    @Override
+    public CraftOfflinePlayer copyUser(User user) {
+        return user instanceof CraftOfflinePlayer
+                ? (CraftOfflinePlayer) user
+                : (CraftOfflinePlayer) UserFactory.super.copyUser(user);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0c0bc50..a8646cc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -3,6 +3,9 @@ package org.bukkit.craftbukkit;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.FileInputStream;
+import java.net.InetSocketAddress;
+import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -25,9 +28,11 @@ import java.util.regex.Pattern;
 
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import javax.inject.Provider;
 
 import com.google.common.collect.*;
 import com.google.inject.Guice;
+import com.google.inject.Inject;
 import com.google.inject.Stage;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.*;
@@ -126,8 +131,10 @@ import io.netty.handler.codec.base64.Base64;
 import jline.console.ConsoleReader;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.event.server.TabCompleteEvent;
+import tc.oc.inject.Providers;
 import tc.oc.minecraft.api.configuration.InvalidConfigurationException;
 import tc.oc.minecraft.api.plugin.PluginFinder;
+import tc.oc.minecraft.api.user.UserFinder;
 
 public final class CraftServer extends CraftBukkitRuntime implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
@@ -136,7 +143,8 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
     private final ServicesManager servicesManager = new SimpleServicesManager();
-    private final CraftScheduler scheduler = new CraftScheduler();
+    private @Inject Provider<CraftScheduler> scheduler = Providers.unavailable(CraftScheduler.class);
+    private @Inject Provider<UserFinder> userFinder = Providers.unavailable(UserFinder.class);
     private final SimpleCommandMap commandMap = new SimpleCommandMap(this);
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
@@ -144,6 +152,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     private final EventBus eventBus;
     protected final MinecraftServer console;
     protected final DedicatedPlayerList playerList;
+    public WorldServer overworld;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
     private final Map<String, World> worldsView = new CaseInsensitiveNameMap<>(worlds.values(), World::getName);
     private final Map<UUID, World> worldsById = new LinkedHashMap<>();
@@ -151,7 +160,6 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     private YamlConfiguration configuration;
     private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
-    private final Map<UUID, OfflinePlayer> offlinePlayers = new MapMaker().weakValues().makeMap();
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
@@ -171,11 +179,13 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     private CraftIconCache icon;
     private boolean overrideAllCommandBlockCommands = false;
     private boolean unrestrictedAdvancements;
+    private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
     private final List<CraftPlayer> playerView;
     private final Map<UUID, Player> playersById;
     public int reloadCount;
     public boolean bungee = false;
     public static final com.google.gson.Gson gson = new com.google.gson.Gson();
+    private static final Path root;
 
     private @Nullable Instant emptySince;
 
@@ -185,6 +195,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
+        root = Paths.get(".").toAbsolutePath();
         CraftItemFactory.instance();
     }
 
@@ -318,6 +329,21 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
         if (pluginFolder.exists()) {
             Plugin[] plugins = pluginManager.loadPlugins(pluginFolder);
+
+            final Stage stage = console.options.valueOf(Main.GUICE_STAGE_OPTION);
+            logger.info("Creating injector in stage " + stage);
+
+            try {
+                injector = Guice.createInjector(
+                        stage,
+                        new CraftServerModule(),
+                        new ServerInstanceModule(this, Arrays.asList(plugins))
+                );
+            } catch(RuntimeException ex) {
+                logger.log(Level.SEVERE, "Injector creation failed, server will shut down", ex);
+                throw ex;
+            }
+
             for (Plugin plugin : plugins) {
                 try {
                     String message = String.format("Loading %s", plugin.getDescription().getFullName());
@@ -528,7 +554,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     // so if that changes this will need to as well
     @Override
     public int getPort() {
-        return this.getConfigInt("server-port", 25565);
+        return getAddress().getPort();
     }
 
     @Override
@@ -538,7 +564,12 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     @Override
     public String getIp() {
-        return this.getConfigString("server-ip", "");
+        return getAddress().getHostString();
+    }
+
+    @Override
+    public InetSocketAddress getAddress() {
+        return getHandle().getServer().getServerConnection().localAddress();
     }
 
     @Override
@@ -614,6 +645,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     // End Temporary calls
 
     @Override
+    public Path getRootPath() {
+        return root;
+    }
+
+    @Override
     public String getUpdateFolder() {
         return this.configuration.getString("settings.update-folder", "update");
     }
@@ -686,7 +722,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     @Override
     public CraftScheduler getScheduler() {
-        return scheduler;
+        return scheduler.get();
     }
 
     @Override
@@ -1399,6 +1435,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public boolean isStopping() {
+        return !console.isRunning();
+    }
+
+    @Override
     public int broadcast(String message, String permission) {
         Set<CommandSender> recipients = new HashSet<>();
         for (Permissible permissible : getPluginManager().getPermissionSubscriptions(permission)) {
@@ -1426,48 +1467,16 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     @Override
     @Deprecated
     public OfflinePlayer getOfflinePlayer(String name) {
-        Validate.notNull(name, "Name cannot be null");
-
-        OfflinePlayer result = getPlayerExact(name);
-        if (result == null) {
-            // This is potentially blocking :(
-            GameProfile profile = console.getUserCache().getProfile(name);
-            if (profile == null) {
-                // Make an OfflinePlayer using an offline mode UUID since the name has no profile
-                result = getOfflinePlayer(new GameProfile(UUID.nameUUIDFromBytes(("OfflinePlayer:" + name.toLowerCase()).getBytes(Charsets.UTF_8)), name));
-            } else {
-                // Use the GameProfile even when we get a UUID so we ensure we still have a name
-                result = getOfflinePlayer(profile);
-            }
-        } else {
-            offlinePlayers.remove(result.getUniqueId());
-        }
-
-        return result;
+        return (OfflinePlayer) userFinder.get().findUser(name);
     }
 
     @Override
     public OfflinePlayer getOfflinePlayer(UUID id) {
-        Validate.notNull(id, "UUID cannot be null");
-
-        OfflinePlayer result = getPlayer(id);
-        if (result == null) {
-            result = offlinePlayers.get(id);
-            if (result == null) {
-                result = new CraftOfflinePlayer(this, new GameProfile(id, null));
-                offlinePlayers.put(id, result);
-            }
-        } else {
-            offlinePlayers.remove(id);
-        }
-
-        return result;
+        return (OfflinePlayer) userFinder.get().findUser(id);
     }
 
     public OfflinePlayer getOfflinePlayer(GameProfile profile) {
-        OfflinePlayer player = new CraftOfflinePlayer(this, profile);
-        offlinePlayers.put(profile.getId(), player);
-        return player;
+        return new CraftOfflinePlayer(this, profile);
     }
 
     @Override
@@ -1594,13 +1603,9 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
         return container;
     }
 
-    @Override
-    public OfflinePlayer[] getOfflinePlayers() {
-        WorldNBTStorage storage = (WorldNBTStorage) console.worlds.get(0).getDataManager();
-        String[] files = storage.getPlayerDir().list(new DatFileFilter());
-        Set<OfflinePlayer> players = new HashSet<OfflinePlayer>();
-
-        for (String file : files) {
+    public Set<OfflinePlayer> getSavedPlayers() {
+        final Set<OfflinePlayer> players = new HashSet<>();
+        for (String file : ((WorldNBTStorage) console.worlds.get(0).getDataManager()).getPlayerDir().list(new DatFileFilter())) {
             try {
                 players.add(getOfflinePlayer(UUID.fromString(file.substring(0, file.length() - 4))));
             } catch (IllegalArgumentException ex) {
@@ -1609,7 +1614,12 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
         }
 
         players.addAll(getOnlinePlayers());
+        return players;
+    }
 
+    @Override
+    public OfflinePlayer[] getOfflinePlayers() {
+        final Set<OfflinePlayer> players = getSavedPlayers();
         return players.toArray(new OfflinePlayer[players.size()]);
     }
 
@@ -1909,6 +1919,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public boolean isMainThread() {
+        return getHandle().getServer().isMainThread();
+    }
+
+    @Override
     public void postToMainThread(Plugin plugin, boolean priority, Runnable task) {
         getHandle().getServer().addMainThreadTask(priority, wrapTask(plugin, task));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServerModule.java b/src/main/java/org/bukkit/craftbukkit/CraftServerModule.java
new file mode 100644
index 0000000..1af816e
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServerModule.java
@@ -0,0 +1,56 @@
+package org.bukkit.craftbukkit;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.Provides;
+import com.google.inject.multibindings.OptionalBinder;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Server;
+import org.bukkit.ServerModule;
+import org.bukkit.craftbukkit.event.CraftServerEventRegistry;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.craftbukkit.user.MojangUserSource;
+import org.bukkit.craftbukkit.user.UserUpdateListener;
+import tc.oc.minecraft.api.user.UserFactory;
+import tc.oc.minecraft.api.user.UserSourceBinder;
+
+import javax.inject.Singleton;
+
+public class CraftServerModule extends AbstractModule {
+
+    @Override
+    protected void configure() {
+        install(new ServerModule());
+
+        bind(CraftServerEventRegistry.class);
+        bind(CraftScheduler.class).in(Singleton.class);
+        bind(UserUpdateListener.class).asEagerSingleton();
+
+        OptionalBinder.newOptionalBinder(binder(), UserFactory.class)
+                .setBinding().to(CraftOfflinePlayerFactory.class);
+
+        new UserSourceBinder(binder())
+                .addBinding().to(MojangUserSource.class);
+    }
+
+    @Provides
+    CraftServer craftServer(Server server) {
+        return (CraftServer) server;
+    }
+
+    @Provides
+    MinecraftServer minecraftServer(CraftServer craftServer) {
+        return craftServer.getServer();
+    }
+
+    @Provides
+    MinecraftSessionService minecraftSessionService(MinecraftServer minecraftServer) {
+        return minecraftServer.az();
+    }
+
+    @Provides
+    GameProfileRepository gameProfileRepository(MinecraftServer minecraftServer) {
+        return minecraftServer.getGameProfileRepository();
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftServerEventRegistry.java b/src/main/java/org/bukkit/craftbukkit/event/CraftServerEventRegistry.java
new file mode 100644
index 0000000..cdcb821
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftServerEventRegistry.java
@@ -0,0 +1,17 @@
+package org.bukkit.craftbukkit.event;
+
+import org.bukkit.event.SimpleEventRegistry;
+import tc.oc.minecraft.api.server.ServerExceptionHandler;
+
+import javax.inject.Inject;
+
+/**
+ * Used internally to register event listeners that don't belong to any plugin
+ */
+public class CraftServerEventRegistry extends SimpleEventRegistry {
+
+    @Inject
+    CraftServerEventRegistry(ServerExceptionHandler exceptionHandler) {
+        super(exceptionHandler);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/CraftServerPing.java b/src/main/java/org/bukkit/craftbukkit/protocol/CraftServerPing.java
new file mode 100644
index 0000000..c529dba
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/CraftServerPing.java
@@ -0,0 +1,31 @@
+package org.bukkit.craftbukkit.protocol;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ServerPing;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+
+public class CraftServerPing extends ServerPing {
+
+    private final Map<String, JsonElement> extra = new HashMap<>();
+
+    public void put(String name, JsonElement value) {
+        extra.put(name, value);
+    }
+
+    private static final ServerPing.Serializer parentSerializer = new ServerPing.Serializer();
+
+    public static class Serializer implements JsonSerializer<CraftServerPing> {
+        @Override
+        public JsonElement serialize(CraftServerPing ping, Type type, JsonSerializationContext context) {
+            final JsonObject json = (JsonObject) parentSerializer.serialize(ping, ServerPing.class, context);
+            ping.extra.forEach(json::add);
+            return json;
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index b57432d..97cf5ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -22,6 +22,9 @@ import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.scheduler.BukkitTask;
 import org.bukkit.scheduler.BukkitWorker;
+import tc.oc.minecraft.api.scheduler.Async;
+
+import javax.inject.Inject;
 
 /**
  * The fundamental concepts for this implementation:
@@ -76,7 +79,7 @@ public class CraftScheduler implements BukkitScheduler {
      */
     private final ConcurrentHashMap<Integer, CraftTask> runners = new ConcurrentHashMap<Integer, CraftTask>();
     private volatile int currentTick = -1;
-    private final Executor executor = Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread - %1$d").build()); // Spigot
+    private @Inject @Async Executor executor;
     private CraftAsyncDebugger debugHead = new CraftAsyncDebugger(-1, null, null) {@Override StringBuilder debugTo(StringBuilder string) {return string;}};
     private CraftAsyncDebugger debugTail = debugHead;
     private static final int RECENT_TICKS;
diff --git a/src/main/java/org/bukkit/craftbukkit/user/MojangUserSource.java b/src/main/java/org/bukkit/craftbukkit/user/MojangUserSource.java
new file mode 100644
index 0000000..7b112d0
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/user/MojangUserSource.java
@@ -0,0 +1,69 @@
+package org.bukkit.craftbukkit.user;
+
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.ProfileLookupCallback;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import org.bukkit.craftbukkit.CraftOfflinePlayer;
+import org.bukkit.craftbukkit.CraftOfflinePlayerFactory;
+import tc.oc.minecraft.api.user.User;
+import tc.oc.minecraft.api.user.UserSearch;
+import tc.oc.minecraft.api.user.UserSource;
+
+import javax.annotation.Nullable;
+import javax.inject.Inject;
+import javax.inject.Singleton;
+import java.time.Instant;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.function.Supplier;
+
+@Singleton
+public class MojangUserSource implements UserSource {
+
+    private final CraftOfflinePlayerFactory userFactory;
+    private final MinecraftSessionService sessions;
+    private final GameProfileRepository profiles;
+
+    @Inject MojangUserSource(CraftOfflinePlayerFactory userFactory, MinecraftSessionService sessions, GameProfileRepository profiles) {
+        this.userFactory = userFactory;
+        this.sessions = sessions;
+        this.profiles = profiles;
+    }
+
+    @Override
+    public User search(UserSearch search, Supplier<User> next) {
+        // Never fetch on the main thread
+        if(search.sync()) return next.get();
+
+        final CraftOfflinePlayer op;
+        if(search.query() instanceof UUID) {
+            op = userFactory.createUser(
+                    sessions.fillProfileProperties(new GameProfile((UUID) search.query(), null), true),
+                    Optional.of(Instant.now())
+            );
+        } else {
+            // Despite the weird callback, this does appear to be entirely synchronous
+            final NameCallback callback = new NameCallback();
+            profiles.findProfilesByNames(new String[] {(String) search.query()}, Agent.MINECRAFT, callback);
+            if(callback.user == null) return next.get();
+            op = callback.user;
+        }
+        return search.filter().test(op) ? op : next.get();
+    }
+
+    private class NameCallback implements ProfileLookupCallback {
+
+        @Nullable
+        CraftOfflinePlayer user;
+
+        @Override
+        public void onProfileLookupSucceeded(GameProfile profile) {
+            user = userFactory.createUser(profile, Optional.of(Instant.now()));
+        }
+
+        @Override
+        public void onProfileLookupFailed(GameProfile profile, Exception e) {}
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/user/UserUpdateListener.java b/src/main/java/org/bukkit/craftbukkit/user/UserUpdateListener.java
new file mode 100644
index 0000000..496aeae
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/user/UserUpdateListener.java
@@ -0,0 +1,39 @@
+package org.bukkit.craftbukkit.user;
+
+import org.bukkit.craftbukkit.event.CraftServerEventRegistry;
+import org.bukkit.event.EventException;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import tc.oc.minecraft.api.user.User;
+import tc.oc.minecraft.api.user.UserFactory;
+import tc.oc.minecraft.api.user.UserSource;
+
+import javax.inject.Inject;
+import java.time.Instant;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Refreshes all {@link UserSource}s when a player logs in
+ */
+public class UserUpdateListener implements Listener {
+
+    private final List<UserSource> userSources;
+    private final UserFactory userFactory;
+
+    @Inject UserUpdateListener(Set<UserSource> userSources, UserFactory userFactory, CraftServerEventRegistry eventRegistry) {
+        this.userSources = new ArrayList<>(userSources);
+        Collections.reverse(this.userSources); // Update sources in the same order as cache propagates
+        this.userFactory = userFactory;
+        eventRegistry.registerListener(this);
+    }
+
+    @EventHandler
+    public void callEvent(AsyncPlayerPreLoginEvent event) throws EventException {
+        final User user = userFactory.createUser(event.getUniqueId(), event.getName(), Instant.now());
+        userSources.forEach(source -> source.update(user));
+    }
+}
