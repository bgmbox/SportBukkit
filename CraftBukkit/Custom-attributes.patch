From 18d226cd8e3efed361df970aebfb2d1ac8fb251f Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 2 Apr 2016 21:57:42 -0400
Subject: [PATCH] Custom attributes


diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 82c8769..a522132 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -73,13 +73,23 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         float f6 = -MathHelper.sin(f * 0.017453292F);
         float f7 = MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
 
+        // SportBukkit start - use attributes
+        final double velocityTransfer;
+        if(entity instanceof EntityLiving) {
+            final EntityLiving entityLiving = (EntityLiving) entity;
+            f4 = (float) entityLiving.getAttributeInstance(EntityLiving.ARROW_ACCURACY).getValue();
+            velocityTransfer = entityLiving.getAttributeInstance(EntityLiving.ARROW_VELOCITY_TRANSFER).getValue();
+        } else {
+            velocityTransfer = 1;
+        }
+
         this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
-        this.motX += entity.motX;
-        this.motZ += entity.motZ;
+        this.motX += entity.motX * velocityTransfer;
+        this.motZ += entity.motZ * velocityTransfer;
         if (!entity.onGround) {
-            this.motY += entity.motY;
+            this.motY += entity.motY * velocityTransfer;
         }
-
+        // SportBukkit end
     }
 
     public void shoot(double d0, double d1, double d2, float f, float f1) {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index cc6e01e..0352207 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -18,6 +18,7 @@ import java.util.ArrayList;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
 import org.bukkit.Location;
+import org.bukkit.attribute.Attribute;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -32,6 +33,12 @@ import org.bukkit.event.player.PlayerItemConsumeEvent;
 
 public abstract class EntityLiving extends Entity {
 
+    // SportBukkit start - add archery attributes
+    public static final IAttribute ARROW_ACCURACY = new AttributeRanged(null, Attribute.ARROW_ACCURACY.getName(), 1, 0, Double.MAX_VALUE);
+    public static final IAttribute ARROW_VELOCITY_TRANSFER = new AttributeRanged(null, Attribute.ARROW_VELOCITY_TRANSFER.getName(), 1, Double.MIN_VALUE, Double.MAX_VALUE);
+    public static final IAttribute SHIELD_STRENGTH = new AttributeRanged(null, Attribute.SHIELD_STRENGTH.getName(), 1, 0, 1);
+    // SportBukkit end
+
     private static final Logger a = LogManager.getLogger();
     private static final UUID b = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier c = (new AttributeModifier(EntityLiving.b, "Sprinting speed boost", 0.30000001192092896D, 2)).a(false);
@@ -158,6 +165,11 @@ public abstract class EntityLiving extends Entity {
         this.getAttributeMap().b(GenericAttributes.MOVEMENT_SPEED);
         this.getAttributeMap().b(GenericAttributes.h);
         this.getAttributeMap().b(GenericAttributes.i);
+        // SportBukkit start - init our attributes
+        this.getAttributeMap().b(ARROW_ACCURACY);
+        this.getAttributeMap().b(ARROW_VELOCITY_TRANSFER);
+        this.getAttributeMap().b(SHIELD_STRENGTH);
+        // SportBukkit end
     }
 
     protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
@@ -1302,7 +1314,7 @@ public abstract class EntityLiving extends Entity {
             Function<Double, Double> blocking = new Function<Double, Double>() {
                 @Override
                 public Double apply(Double f) {
-                    return -((EntityLiving.this.applyBlockingModifier(damagesource)) ? f : 0.0);
+                    return -((EntityLiving.this.applyBlockingModifier(damagesource)) ? getAttributeInstance(SHIELD_STRENGTH).getValue() * f : 0.0); // SportBukkit - shield strength
                 }
             };
             float blockingModifier = blocking.apply((double) f).floatValue();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 199fd44..bc979eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit.inventory;
 
 import java.util.*;
 
+import com.google.common.collect.Lists;
 import net.minecraft.server.AttributeModifier;
 import net.minecraft.server.EnumItemSlot;
 import net.minecraft.server.Item;
@@ -29,20 +30,7 @@ public final class CraftItemFactory implements ItemFactory {
     static {
         instance = new CraftItemFactory();
         ConfigurationSerialization.registerClass(CraftMetaItem.SerializableMeta.class);
-        KNOWN_NBT_ATTRIBUTE_NAMES = ImmutableSet.<String>builder()
-            .add("generic.armor")
-            .add("generic.armorToughness")
-            .add("generic.attackDamage")
-            .add("generic.followRange")
-            .add("generic.knockbackResistance")
-            .add("generic.maxHealth")
-            .add("generic.movementSpeed")
-            .add("generic.flyingSpeed")
-            .add("generic.attackSpeed")
-            .add("generic.luck")
-            .add("horse.jumpStrength")
-            .add("zombie.spawnReinforcements")
-            .build();
+        KNOWN_NBT_ATTRIBUTE_NAMES = ImmutableSet.copyOf(Lists.transform(Arrays.asList(Attribute.values()), Attribute::getName));
     }
 
     private CraftItemFactory() {
