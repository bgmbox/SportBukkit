From 29389cccea8c9678aaff8ad5c6c66631d9fe78bb Mon Sep 17 00:00:00 2001
From: thinkofdeath <purggames@gmail.com>
Date: Fri, 12 Apr 2013 18:19:11 +0100
Subject: [PATCH] Allow playEffect to spawn particles


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
index 1672183..582d7bf 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
@@ -58,6 +58,8 @@ public class CraftEffect {
             Validate.isTrue(((Material) data).isBlock(), "Material is not a block!");
             datavalue = ((Material) data).getId();
             break;
+        case ITEM_BREAK:
+            datavalue = ((Material) data).getId();
         default:
             datavalue = 0;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 8f6653f..11f17e2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -822,6 +822,10 @@ public class CraftWorld implements World {
         playEffect(player.getLocation(), effect, data, 0);
     }
 
+    public void playEffect(Location location, Effect effect) {
+        playEffect(location, effect, 0);
+    }
+
     public void playEffect(Location location, Effect effect, int data) {
         playEffect(location, effect, data, 64);
     }
@@ -837,16 +841,44 @@ public class CraftWorld implements World {
             Validate.isTrue(effect.getData() == null, "Wrong kind of data for this effect!");
         }
 
-        int datavalue = data == null ? 0 : CraftEffect.getDataValue(effect, data);
-        playEffect(loc, effect, datavalue, radius);
+        if (data.getClass().equals(MaterialData.class)) {
+            MaterialData materialData = (MaterialData) data;
+            Validate.isTrue(!materialData.getItemType().isBlock(), "Material must be block");
+            playEffect(loc, effect, materialData.getItemType().getId(), materialData.getData(), 0, 0, 0, 1, 1, radius);
+        } else {
+            int datavalue = data == null ? 0 : CraftEffect.getDataValue(effect, data);
+            playEffect(loc, effect, datavalue, radius);
+        }
     }
 
     public void playEffect(Location location, Effect effect, int data, int radius) {
+        playEffect(location,effect, data, 0, 0f, 0f, 0f, 1f, 1, radius);
+    }
+
+    public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius) {
         Validate.notNull(location, "Location cannot be null");
         Validate.notNull(effect, "Effect cannot be null");
         Validate.notNull(location.getWorld(), "World cannot be null");
-        int packetData = effect.getId();
-        PacketPlayOutWorldEvent packet = new PacketPlayOutWorldEvent(packetData, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ()), data, false);
+
+        Packet packet = null;
+        if (effect.getType() != Effect.Type.PARTICLE) {
+            int packetData = effect.getId();
+            packet = new PacketPlayOutWorldEvent(packetData, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ()), data, false);
+        } else {
+            StringBuilder particleFullName = new StringBuilder();
+            particleFullName.append(effect.getName());
+
+            if (effect.getData() != null && (effect.getData().equals(Material.class) || effect.getData().equals(MaterialData.class))) {
+                particleFullName.append('_').append(id);
+            }
+
+            if (effect.getData() != null && effect.getData().equals(MaterialData.class)) {
+                particleFullName.append('_').append(data);
+            }
+
+            packet = new PacketPlayOutWorldParticles(EnumParticle.valueOf(effect.getName()), false, (float)location.getX(), (float)location.getY(), (float)location.getZ(), offsetX, offsetY, offsetZ, particleCount, radius);
+        }
+
         int distance;
         radius *= radius;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 1866d52..64902f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -65,6 +65,7 @@ import org.bukkit.event.player.PlayerUnregisterChannelEvent;
 import org.bukkit.inventory.InventoryView.Property;
 import org.bukkit.map.MapCursor;
 import org.bukkit.map.MapView;
+import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
@@ -377,15 +378,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playEffect(Location loc, Effect effect, int data) {
-        if (getHandle().playerConnection == null) return;
-
-        int packetData = effect.getId();
-        PacketPlayOutWorldEvent packet = new PacketPlayOutWorldEvent(packetData, new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), data, false);
-        getHandle().playerConnection.sendPacket(packet);
-    }
-
-    @Override
     public <T> void playEffect(Location loc, Effect effect, T data) {
         if (data != null) {
             Validate.isTrue(effect.getData() != null && effect.getData().isAssignableFrom(data.getClass()), "Wrong kind of data for this effect!");
@@ -393,8 +385,50 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             Validate.isTrue(effect.getData() == null, "Wrong kind of data for this effect!");
         }
 
-        int datavalue = data == null ? 0 : CraftEffect.getDataValue(effect, data);
-        playEffect(loc, effect, datavalue);
+        if (data.getClass().equals(MaterialData.class)) {
+            MaterialData materialData = (MaterialData) data;
+            Validate.isTrue(!materialData.getItemType().isBlock(), "Material must be block");
+            playEffect(loc, effect, materialData.getItemType().getId(), materialData.getData(), 0, 0, 0, 1, 1, 64);
+        } else {
+            int datavalue = data == null ? 0 : CraftEffect.getDataValue(effect, data);
+            playEffect(loc, effect, datavalue);
+        }
+    }
+
+    @Override
+    public void playEffect(Location location, Effect effect, int data) {
+        playEffect(location, effect, data, 0, 0f, 0f, 0f, 1f, 1, 64);
+    }
+
+    @Override
+    public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius) {
+        Validate.notNull(location, "Location cannot be null");
+        Validate.notNull(effect, "Effect cannot be null");
+        Validate.notNull(location.getWorld(), "World cannot be null");
+
+        Packet packet = null;
+        if (effect.getType() != Effect.Type.PARTICLE) {
+            int packetData = effect.getId();
+            packet = new PacketPlayOutWorldEvent(packetData, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ()), id, false);
+        } else {
+            StringBuilder particleFullName = new StringBuilder();
+            particleFullName.append(effect.getName());
+
+            if (effect.getData() != null && (effect.getData().equals(Material.class) || effect.getData().equals(MaterialData.class))) {
+                particleFullName.append('_').append(id);
+            }
+
+            if (effect.getData() != null && effect.getData().equals(MaterialData.class)) {
+                particleFullName.append('_').append(data);
+            }
+            packet = new PacketPlayOutWorldParticles(EnumParticle.valueOf(effect.getName()), false, (float)location.getX(), (float)location.getY(), (float)location.getZ(), offsetX, offsetY, offsetZ, particleCount, radius);
+        }
+
+        if (!location.getWorld().equals(getWorld())) {
+            return;
+        }
+
+        getHandle().playerConnection.sendPacket(packet);
     }
 
     @Override
