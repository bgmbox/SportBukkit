From fe44dc5b737d565e774cc56f957c5865c4b148ed Mon Sep 17 00:00:00 2001
From: ShinyDialga <shinydialga45@gmail.com>
Date: Sat, 11 Aug 2018 01:20:08 -0500
Subject: [PATCH] Re-add w-tapping


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 7c9147f..d9159d5 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1403,7 +1403,10 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void f(double d0, double d1, double d2) {
-        applyImpulse(d0, d1, d2, false);
+        this.motX += d0;
+        this.motY += d1;
+        this.motZ += d2;
+        this.impulse = true;
     }
     // SportBukkit end
 
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index b6f7651..7cff6b7 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -67,8 +67,6 @@ public abstract class EntityHuman extends EntityLiving {
     @Nullable
     public EntityFishingHook hookedFish;
 
-    public int clientTicksSinceLastAttack; // SportBukkit
-
     // SportBukkit start - natural regen API
     public boolean fastNaturalRegeneration = true;
     public boolean slowNaturalRegeneration = true;
@@ -200,7 +198,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         if (!ItemStack.matches(this.bV, itemstack)) {
             if (!ItemStack.d(this.bV, itemstack)) {
-                this.ds();
+//                this.ds();
             }
 
             this.bV = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
@@ -969,27 +967,18 @@ public abstract class EntityHuman extends EntityLiving {
                     f1 = EnchantmentManager.a(this.getItemInMainHand(), EnumMonsterType.UNDEFINED);
                 }
 
-                float f2 = this.n(0.5F);
-
-                f *= 0.2F + f2 * f2 * 0.8F;
-                f1 *= f2;
                 // this.ds();   SportBukkit - don't reset cooldown here, let the arm swing packet do it
                 if (f > 0.0F || f1 > 0.0F) {
-                    boolean flag = f2 > 0.9F;
-                    boolean flag1 = false;
                     byte b0 = 0;
                     int i = b0 + EnchantmentManager.b((EntityLiving) this);
 
-                    if (this.isSprinting() && flag) {
-                        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.fw, this.bK(), 1.0F, 1.0F);
+                    if (this.isSprinting()) {
                         ++i;
-                        flag1 = true;
                     }
 
-                    boolean flag2 = flag && this.fallDistance > 0.0F && !this.onGround && !this.m_() && !this.isInWater() && !this.hasEffect(MobEffects.BLINDNESS) && !this.isPassenger() && entity instanceof EntityLiving;
+                    boolean flag = this.fallDistance > 0.0F && !this.onGround && !this.m_() && !this.isInWater() && !this.hasEffect(MobEffects.BLINDNESS) && !this.isPassenger() && entity instanceof EntityLiving;
 
-                    flag2 = flag2 && !this.isSprinting();
-                    if (flag2) {
+                    if (flag && f > 0.0F) {
                         f *= 1.5F;
                     }
 
@@ -997,7 +986,7 @@ public abstract class EntityHuman extends EntityLiving {
                     boolean flag3 = false;
                     double d0 = (double) (this.J - this.I);
 
-                    if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.cy()) {
+                    if (this.isSprinting() && this.onGround && d0 < (double) this.cy()) {
                         ItemStack itemstack = this.b(EnumHand.MAIN_HAND);
 
                         if (itemstack.getItem() instanceof ItemSword) {
@@ -1031,15 +1020,12 @@ public abstract class EntityHuman extends EntityLiving {
 
                     if (flag5) {
                         if (i > 0) {
-                            if (entity instanceof EntityLiving && !getBukkitEntity().getServer().getLegacyKnockback()) { // SportBukkit - top method halves previous velocity, and legacy code never called it
-                                ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
-                            } else {
-                                entity.applyKnockback(this, (double) (-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F), false); // SportBukkit - use knockback method
-                            }
+//                            ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
 
+                            entity.f((double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F));
                             this.motX *= 0.6D;
                             this.motZ *= 0.6D;
-//                            this.setSprinting(false); //SportBukkit - fix sprinting bug
+                            this.setSprinting(false); //SportBukkit - fix sprinting bug
                         }
 
                         if (flag3) {
@@ -1063,47 +1049,38 @@ public abstract class EntityHuman extends EntityLiving {
                             this.cX();
                         }
 
-                        if (entity instanceof EntityPlayer && entity.velocityChanged) {
-                            // CraftBukkit start - Add Velocity Event
-                            ((EntityPlayer) entity).sendVelocity();
-                            /*
-                            boolean cancelled = false;
-                            Player player = (Player) entity.getBukkitEntity();
-                            org.bukkit.util.Vector velocity = new Vector( d1, d2, d3 );
-
-                            PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
-                            world.getServer().getPluginManager().callEvent(event);
-
-                            if (event.isCancelled()) {
-                                cancelled = true;
-                            } else if (!velocity.equals(event.getVelocity())) {
-                                player.setVelocity(event.getVelocity());
+                        // CraftBukkit start
+                        // If the attack caused knockback, send the new velocity to the victim's client immediately,
+                        // and undo the change. Otherwise, if movement packets from the victim are processed before
+                        // the end of the tick, then friction may reduce the velocity considerably before it's sent
+                        // to the client, particularly if the victim was standing on the ground when those packets
+                        // were generated. And because this glitch is also likely to make server-side velocity very
+                        // inconsistent, we simply reverse the knockback after sending it so that KB, like most other
+                        // things, doesn't affect server velocity at all.
+                        if(entity instanceof EntityPlayer && entity.velocityChanged) {
+                            EntityPlayer attackedPlayer = (EntityPlayer) entity;
+                            PlayerVelocityEvent event = new PlayerVelocityEvent(attackedPlayer.getBukkitEntity(),
+                                    attackedPlayer.getBukkitEntity().getVelocity());
+                            this.world.getServer().getPluginManager().callEvent(event);
+                            if(!event.isCancelled()) {
+                                attackedPlayer.getBukkitEntity().setVelocityDirect(event.getVelocity());
+                                attackedPlayer.playerConnection.sendPacket(new PacketPlayOutEntityVelocity(attackedPlayer));
                             }
 
-                            if (!cancelled) {
-                            ((EntityPlayer) entity).playerConnection.sendPacket(new PacketPlayOutEntityVelocity(entity));
-                            entity.velocityChanged = false;
-                            */
-                            entity.motX = d1;
-                            entity.motY = d2;
-                            entity.motZ = d3;
-                            /*
-                            }
-                            */
-                            // CraftBukkit end
+                            attackedPlayer.velocityChanged = false;
+                            attackedPlayer.motX = d1;
+                            attackedPlayer.motY = d2;
+                            attackedPlayer.motZ = d3;
                         }
+                        // CraftBukkit end
 
-                        if (flag2) {
+                        if (flag) {
                             this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.fv, this.bK(), 1.0F, 1.0F);
                             this.a(entity);
                         }
 
-                        if (!flag2 && !flag3) {
-                            if (flag) {
-                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.fy, this.bK(), 1.0F, 1.0F);
-                            } else {
-                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.fA, this.bK(), 1.0F, 1.0F);
-                            }
+                        if (!flag && !flag3) {
+                            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.fA, this.bK(), 1.0F, 1.0F);
                         }
 
                         if (f1 > 0.0F) {
@@ -1922,13 +1899,8 @@ public abstract class EntityHuman extends EntityLiving {
         return (float) (1.0D / this.getAttributeInstance(GenericAttributes.g).getValue() * 20.0D);
     }
 
-    public float n(float f) {
-        return MathHelper.a(((float) Math.max(this.aE, this.clientTicksSinceLastAttack) + f) / this.dr(), 0.0F, 1.0F); // SportBukkit - check client and server ticks
-    }
-
     public void ds() {
         this.aE = 0;
-        this.clientTicksSinceLastAttack = 0; // SportBukkit
     }
 
     public ItemCooldown getCooldownTracker() {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 3e0431f..756378d 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -820,7 +820,7 @@ public abstract class EntityLiving extends Entity {
                 player.setRealHealth(f);
             }
 
-            player.updateScaledHealth();
+            this.datawatcher.set(EntityLiving.HEALTH, Float.valueOf(player.getScaledHealth()));
             return;
         }
         // CraftBukkit end
@@ -833,7 +833,6 @@ public abstract class EntityLiving extends Entity {
         } else if (this.world.isClientSide) {
             return false;
         } else {
-            f = Math.min(f, Float.MAX_VALUE / 0x100); // SportBukkit - clamp huge values that will overflow and become NaN
             this.ticksFarFromPlayer = 0;
             if (this.getHealth() <= 0.0F) {
                 return false;
@@ -957,7 +956,7 @@ public abstract class EntityLiving extends Entity {
                         }
 
                         this.aA = (float) (MathHelper.c(d1, d0) * 57.2957763671875D - (double) this.yaw);
-                        this.a(damagesource.i(), 0.4F, d0, d1); // SportBukkit - use direct damage source instead of owner
+                        this.a(entity1, f, d0, d1); // SportBukkit - use direct damage source instead of owner
                     } else {
                         this.aA = (float) ((int) (Math.random() * 2.0D) * 180);
                     }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index ca6f57d..1c34bd2 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -103,7 +103,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     @Override
     public void applyKnockback(Entity attacker, double x, double y, double z, boolean client) {
         final double d = knockbackScale();
-        final PlayerKnockbackEvent event = new PlayerKnockbackEvent(getBukkitEntity(), attacker.getBukkitEntity(), new Vector(d * x, d * y, d * z), true);
+        final PlayerKnockbackEvent event = new PlayerKnockbackEvent(getBukkitEntity(), attacker.getBukkitEntity(), new Vector(d * x, d * y, d * z));
         getBukkitEntity().getServer().getPluginManager().callEvent(event);
         if(event.isCancelled() || event.getVelocity().isZero()) return;
 
@@ -112,7 +112,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     @Override
     public void applyImpulse(double x, double y, double z, boolean client) {
-        final PlayerVelocityEvent event = new PlayerVelocityEvent(getBukkitEntity(), new Vector(x, y, z), true);
+        final PlayerVelocityEvent event = new PlayerVelocityEvent(getBukkitEntity(), new Vector(x, y, z));
         getBukkitEntity().getServer().getPluginManager().callEvent(event);
         if(event.isCancelled() || event.getVelocity().isZero()) return;
 
@@ -121,7 +121,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     @Override
     public void setVelocity(double x, double y, double z) {
-        final PlayerVelocityEvent event = new PlayerVelocityEvent(getBukkitEntity(), new Vector(x, y, z), false);
+        final PlayerVelocityEvent event = new PlayerVelocityEvent(getBukkitEntity(), new Vector(x, y, z));
         getBukkitEntity().getServer().getPluginManager().callEvent(event);
         if(event.isCancelled()) return;
 
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index e01f089..15598ec 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -255,8 +255,7 @@ public class EntityTrackerEntry {
         }
 
         ++this.a;
-        // SportBukkit start - velocity API
-        /*
+
         if (this.tracker.velocityChanged) {
             // CraftBukkit start - Create PlayerVelocity event
             boolean cancelled = false;
@@ -281,13 +280,7 @@ public class EntityTrackerEntry {
             // CraftBukkit end
             this.tracker.velocityChanged = false;
         }
-        */
-        if(this.tracker instanceof EntityPlayer) {
-            ((EntityPlayer) this.tracker).sendVelocity();
-        } else if(this.tracker.velocityChanged) {
-            broadcast(new PacketPlayOutEntityVelocity(this.tracker));
-            this.tracker.velocityChanged = false;
-        }
+
         // SportBukkit end
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index be636bb..907ec93 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -547,8 +547,6 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     this.syncPosition();
                 }
 
-                this.player.clientTicksSinceLastAttack++; // SportBukkit
-
                 // SportBukkit start - velocity prediction
                 this.player.handleClientTick(
                         packetplayinflying.hasPos ? new Vector(packetplayinflying.x,
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 0910473..04c621d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -528,13 +528,12 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
     @Override
     public int getAttackCooldownTicks() {
-        return Math.max(getHandle().ticksSinceLastAttack(), getHandle().clientTicksSinceLastAttack);
+        return 0;
     }
 
     @Override
     public float getAttackCooldownCoefficient() {
-        final float f = getHandle().n(0.5f);
-        return 0.2f + f * f * 0.8f;
+        return 0.0f;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 80ce19e..2cfb6c0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1785,12 +1785,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         injectScaledMaxHealth(set, true);
 
-        // SPIGOT-3813: Attributes before health
-        if (getHandle().playerConnection != null) {
-            getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateAttributes(getHandle().getId(), set));
-            sendHealthUpdate();
-        }
         getHandle().getDataWatcher().set(EntityLiving.HEALTH, (float) getScaledHealth());
+        sendHealthUpdate();
+        getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateAttributes(getHandle().getId(), set));
 
         getHandle().maxHealthCache = getMaxHealth();
     }
@@ -2124,4 +2121,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public float getRemainingItemCooldown(Material item) {
         return getHandle().getCooldownTracker().a(CraftMagicNumbers.getItem(item), 0F);
     }
+
+    public void setVelocityDirect(Vector vel) {
+        entity.motX = vel.getX();
+        entity.motY = vel.getY();
+        entity.motZ = vel.getZ();
+    }
 }
