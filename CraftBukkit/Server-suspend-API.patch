From 058c91b0cc7f7c3a5f7d1a79ad625c13c84365f3 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 10 Dec 2016 20:28:26 -0500
Subject: [PATCH] Server suspend API


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 2bc0220..65ede80 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -285,6 +285,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     thread1.setName("Server Watchdog");
                     thread1.setDaemon(true);
                     thread1.start();
+                    watchdogThread = thread1; // SportBukkit
                 }
 
                 Items.a.a(CreativeModeTab.g, NonNullList.a());
@@ -392,6 +393,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     public void issueCommand(String s, ICommandListener icommandlistener) {
         this.serverCommandQueue.add(new ServerCommand(s, icommandlistener));
+        interrupt(); // SportBukkit
     }
 
     // SportBukkit start
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 94732a2..3ba6d2b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -35,6 +35,7 @@ import java.util.UUID;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
@@ -47,6 +48,8 @@ import joptsimple.OptionSet;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.Main;
+import org.bukkit.event.EventBody;
+import org.bukkit.event.server.ServerSuspendEvent;
 // CraftBukkit end
 
 // SportBukkit start
@@ -133,6 +136,13 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     protected boolean abnormalTermination;
     // Sportbukkit end
 
+    // SportBukkit start
+    private final AtomicBoolean suspended = new AtomicBoolean(false);
+    private @Nullable Instant suspendedAt;
+    private int interruptions;
+    protected Thread watchdogThread;
+    // SportBukkit end
+
     public MinecraftServer(OptionSet options, Proxy proxy, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
         this.e = proxy;
         this.V = yggdrasilauthenticationservice;
@@ -535,9 +545,83 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
     public void safeShutdown() {
         this.isRunning = false;
+        setSuspended(false); // SportBukkit
+    }
+
+    // SportBukkit start
+    public boolean isSuspended() {
+        return isRunning() && suspended.get();
+    }
+
+    public boolean canSuspend() {
+        return isRunning() && !p.hasClientConnections();
+    }
+
+    public boolean setSuspended(boolean suspend) {
+        if(suspend && !canSuspend()) return false;
+
+        if(suspended.compareAndSet(!suspend, suspend)) {
+            if(!isMainThread() && !suspend) {
+                synchronized(suspended) {
+                    suspended.notifyAll();
+                }
+            }
+            return true;
+        }
+
+        return false;
+    }
+
+    public @Nullable Instant suspendedAt() {
+        return suspendedAt;
+    }
+
+    public int interruptions() {
+        return interruptions;
+    }
+
+    private boolean doSuspension() {
+        if(isSuspended()) {
+            server.eventBus().callEvent(new ServerSuspendEvent(), (EventBody<ServerSuspendEvent, RuntimeException>) ev -> { // Cast needed due to javac bug
+                server.getLogger().info("Suspending server");
+                suspendedAt = Instant.now();
+                interruptions = 0;
+
+                if(watchdogThread != null) watchdogThread.interrupt();
+
+                while(isSuspended()) {
+                    processTasks(); // Empty the task queue
+                    synchronized(suspended) {
+                        if(isSuspended()) { // Check suspended state again, in case a task resumed
+                            try { suspended.wait(); }
+                            catch(InterruptedException ignored) {}
+                            interruptions++;
+                        }
+                    }
+                }
+
+                if(watchdogThread != null) watchdogThread.interrupt();
+
+                interruptions = 0;
+                suspendedAt = null;
+                setLastTickStart(realTimeMillis());
+                server.getLogger().info("Resuming server");
+            });
+            return true;
+        }
+        return false;
+    }
+
+    public void interrupt() {
+        if(!isMainThread()) {
+            synchronized(suspended) {
+                if(suspended.get()) {
+                    suspended.notifyAll();
+                }
+            }
+        }
     }
 
-    // SportBukkit Start
     private static double calcTps(double avg, double exp, double tps) {
         return ( avg * exp ) + ( tps * ( 1 - exp ) );
     }
@@ -552,18 +636,23 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
                 // SportBukkit start
                 Arrays.fill( recentTps, 20 );
-                long lastTick = System.nanoTime(), catchupTime = 0, curTime, wait, tickSection = lastTick;
+                long lastTick = System.nanoTime(), catchupTime = 0, curTime, tickSection = lastTick;
 
                 while (this.isRunning) {
                     setLastTickStart(realTimeMillis());
                     curTime = System.nanoTime();
-                    wait = TICK_TIME - (curTime - lastTick) - catchupTime;
-                    if (wait > 0) {
-                        Thread.sleep(wait / 1000000);
+                    final long wait = TICK_TIME - (curTime - lastTick) - catchupTime;
+                    if(wait < 0) {
+                        catchupTime = Math.min(1000000000, Math.abs(wait));
+                    } else {
+                        catchupTime = 0;
+                        if(doSuspension()) {
+                            tickSection = lastTick = curTime - TICK_TIME;
+                        } else {
+                            Thread.sleep(wait / 1000000);
+                        }
                         catchupTime = 0;
                         continue;
-                    } else {
-                        catchupTime = Math.min(1000000000, Math.abs(wait));
                     }
                     lastTick = curTime;
 
@@ -716,6 +805,8 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
         // SportBukkit start - don't lock the task queue while running tasks
         processTasks();
+        this.server.checkEmpty();
+        if(suspended.get()) return;
         /*
         synchronized (this.j) {
             while (!this.j.isEmpty()) {
@@ -1445,6 +1536,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
             synchronized (this.j) {
                 this.j.add(listenablefuturetask);
+                interrupt(); // SportBukkit
                 return listenablefuturetask;
             }
         } else {
@@ -1478,6 +1570,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                 taskQueue.addLast(task);
             }
         }
+        interrupt();
     }
 
     public void addMainThreadTask(Runnable task) {
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index fd4b0bc..a27ee39 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -186,4 +186,10 @@ public class ServerConnection {
     public MinecraftServer d() {
         return this.f;
     }
+
+    // SportBukkit start
+    public boolean hasClientConnections() {
+        return !h.isEmpty();
+    }
+    // SportBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/ThreadWatchdog.java b/src/main/java/net/minecraft/server/ThreadWatchdog.java
index dd18b4e..a3481c0 100644
--- a/src/main/java/net/minecraft/server/ThreadWatchdog.java
+++ b/src/main/java/net/minecraft/server/ThreadWatchdog.java
@@ -22,8 +22,17 @@ public class ThreadWatchdog implements Runnable {
         this.c = dedicatedserver.aT();
     }
 
+    // SportBukkit start
+    synchronized private void doSuspension() {
+        while(this.b.isSuspended()) {
+            try { wait(); } catch(InterruptedException ignored) {}
+        }
+    }
+    // SportBukkit end
+
     public void run() {
         while (this.b.isRunning()) {
+            doSuspension(); // SportBukkit
             long i = this.b.aH();
             long j = MinecraftServer.aw();
             long k = j - i;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index fc93baf..85f97e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -6,6 +6,8 @@ import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.time.Duration;
+import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -21,6 +23,7 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
+import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 
 import com.google.common.collect.*;
@@ -123,6 +126,7 @@ import io.netty.handler.codec.base64.Base64;
 import jline.console.ConsoleReader;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.event.server.TabCompleteEvent;
+import tc.oc.minecraft.api.configuration.InvalidConfigurationException;
 import tc.oc.minecraft.api.plugin.PluginFinder;
 
 public final class CraftServer extends CraftBukkitRuntime implements Server {
@@ -173,6 +177,8 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     public boolean bungee = false;
     public static final com.google.gson.Gson gson = new com.google.gson.Gson();
 
+    private @Nullable Instant emptySince;
+
     private final class BooleanWrapper {
         private boolean value = true;
     }
@@ -184,7 +190,13 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     public CraftServer(MinecraftServer console, PlayerList playerList) {
         this.console = console;
-        this.eventBus = new SimpleEventBus(this.console.primaryThread, pluginManager);
+        this.eventBus = new SimpleEventBus(this.console.primaryThread, task -> {
+            if(console.isMainThread()) {
+                task.run();
+            } else {
+                console.addMainThreadTask(task);
+            }
+        });
         this.playerList = (DedicatedPlayerList) playerList;
         this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, EntityPlayer::getBukkitEntity));
         this.playersById = Collections.unmodifiableMap(Maps.transformValues(playerList.playersById(), EntityPlayer::getBukkitEntity));
@@ -632,6 +644,17 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public @Nullable
+    Duration getEmptyServerSuspendDelay() {
+        try {
+            return this.configuration.getDuration("settings.empty-server-suspend");
+        } catch(InvalidConfigurationException e) {
+            getLogger().log(Level.SEVERE, "Invalid configuration value", e);
+            return null;
+        }
+    }
+
+    @Override
     public PluginManager getPluginManager() {
         return pluginManager;
     }
@@ -1897,4 +1920,53 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
         return task instanceof Wrapped ? task : new Wrapped();
     }
+
+    @Override
+    public boolean isSuspended() {
+        return getServer().isSuspended();
+    }
+
+    @Override
+    public boolean canSuspend() {
+        return getServer().canSuspend();
+    }
+
+    @Override
+    public boolean setSuspended(boolean suspend) {
+        return getServer().setSuspended(suspend);
+    }
+
+    @Override
+    public @Nullable Instant suspendedAt() {
+        return getServer().suspendedAt();
+    }
+
+    @Override
+    public int interruptions() {
+        return getServer().interruptions();
+    }
+
+    @Override
+    public @Nullable Instant emptySince() {
+        if(getOnlinePlayers().isEmpty()) {
+            if(emptySince == null) {
+                emptySince = Instant.now();
+            }
+        } else {
+            emptySince = null;
+        }
+        return emptySince;
+    }
+
+    public void checkEmpty() {
+        final Instant since = emptySince();
+        if(since == null) {
+            setSuspended(false);
+        } else {
+            final Duration delay = getEmptyServerSuspendDelay();
+            if(delay != null && canSuspend() && !since.plus(delay).isAfter(Instant.now())) {
+                setSuspended(true);
+            }
+        }
+    }
 }
