From 5fabf59fdcb56be3b656c3d9003801939dbfb501 Mon Sep 17 00:00:00 2001
From: md_5 <git@md-5.net>
Date: Sat, 13 Dec 2014 13:06:05 +1100
Subject: [PATCH] BungeeCord Chat API


diff --git a/src/main/java/net/minecraft/server/ChatModifier.java b/src/main/java/net/minecraft/server/ChatModifier.java
index 7ebe188..29d7408 100644
--- a/src/main/java/net/minecraft/server/ChatModifier.java
+++ b/src/main/java/net/minecraft/server/ChatModifier.java
@@ -115,6 +115,18 @@ public class ChatModifier {
 
     public ChatModifier() {}
 
+    // SportBukkit start - add raw getters (make sure the fields in these methods match the ones below)
+    public EnumChatFormat getColorRaw() { return this.b; }
+    public Boolean isBoldRaw() { return this.c; }
+    public Boolean isItalicRaw() { return this.d; }
+    public Boolean isStrikethroughRaw() { return this.f; }
+    public Boolean isUnderlinedRaw() { return this.e; }
+    public Boolean isRandomRaw() { return this.g; }
+    public ChatClickable getClickableRaw() { return this.h; }
+    public ChatHoverable getHoverableRaw() { return this.i; }
+    public String getInsertionRaw() { return this.j; }
+    // SportBukkit end
+
     @Nullable
     public EnumChatFormat getColor() {
         return this.b == null ? this.o().getColor() : this.b;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutChat.java b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
index b1fddee..b1dbe0a 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutChat.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
@@ -5,6 +5,7 @@ import java.io.IOException;
 public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
 
     private IChatBaseComponent a;
+    public net.md_5.bungee.api.chat.BaseComponent[] components; // Spigot
     private ChatMessageType b;
 
     public PacketPlayOutChat() {}
@@ -24,7 +25,16 @@ public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.a(this.a);
+        // Spigot start
+        if (components != null) {
+            packetdataserializer.a(net.md_5.bungee.chat.ComponentSerializer.toString(components));
+        } else {
+            packetdataserializer.a(this.a);
+        }
+        if (this.b == null) {
+            this.b = ChatMessageType.CHAT;
+        }
+        // Spigot end
         packetdataserializer.writeByte(this.b.a());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a59f3b9..acc9a95 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -23,6 +23,7 @@ import java.util.regex.Pattern;
 
 import javax.imageio.ImageIO;
 
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.*;
 
 import org.bukkit.BanList;
@@ -1764,4 +1765,18 @@ public final class CraftServer implements Server {
     public UnsafeValues getUnsafe() {
         return CraftMagicNumbers.INSTANCE;
     }
+
+    @Override
+    public void broadcast(BaseComponent component) {
+        for (Player player : getOnlinePlayers()) {
+            player.sendMessage(component);
+        }
+    }
+
+    @Override
+    public void broadcast(BaseComponent... components) {
+        for (Player player : getOnlinePlayers()) {
+            player.sendMessage(components);
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 04d04c6..b8fa1f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -26,6 +26,7 @@ import java.util.WeakHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.*;
 import net.minecraft.server.PacketPlayOutTitle.EnumTitleAction;
 
@@ -1834,4 +1835,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void setLocale(String locale) {
         getHandle().locale = locale;
     }
+
+    @Override
+    public void sendMessage(BaseComponent component) {
+        sendMessage( new BaseComponent[] { component } );
+    }
+
+    @Override
+    public void sendMessage(BaseComponent... components) {
+        if ( getHandle().playerConnection == null ) return;
+
+        PacketPlayOutChat packet = new PacketPlayOutChat();
+        packet.components = components;
+        getHandle().playerConnection.sendPacket(packet);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/BungeeChatUtils.java b/src/main/java/org/bukkit/craftbukkit/util/BungeeChatUtils.java
new file mode 100644
index 0000000..a09dbf9
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/util/BungeeChatUtils.java
@@ -0,0 +1,173 @@
+package org.bukkit.craftbukkit.util;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.*;
+import net.minecraft.server.*;
+import net.minecraft.server.ChatClickable.EnumClickAction;
+import net.minecraft.server.ChatHoverable.EnumHoverAction;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public final class BungeeChatUtils {
+    private BungeeChatUtils() {}
+
+    private static <T extends Enum<T>> T convertEnum(Enum<?> from, Class<T> to) {
+        return from == null ? null : to.getEnumConstants()[from.ordinal()];
+    }
+
+    public static EnumChatFormat toNms(ChatColor bungee) {
+        return convertEnum(bungee, EnumChatFormat.class);
+    }
+
+    public static EnumHoverAction toNms(HoverEvent.Action bungee) {
+        return convertEnum(bungee, EnumHoverAction.class);
+    }
+
+    public static EnumClickAction toNms(ClickEvent.Action bungee) {
+        return convertEnum(bungee, EnumClickAction.class);
+    }
+
+    public static ChatHoverable toNms(HoverEvent bungee) {
+        return bungee == null ? null : new ChatHoverable(toNms(bungee.getAction()), toNms(bungee.getValue()));
+    }
+
+    public static ChatClickable toNms(ClickEvent bungee) {
+        return bungee == null ? null : new ChatClickable(toNms(bungee.getAction()), bungee.getValue());
+    }
+
+    public static ChatModifier toNmsModifier(BaseComponent bungee) {
+        final ChatModifier mod = new ChatModifier();
+
+        mod.setColor(toNms(bungee.getColorRaw()));
+
+        mod.setRandom(bungee.isObfuscatedRaw());
+        mod.setBold(bungee.isBoldRaw());
+        mod.setStrikethrough(bungee.isStrikethroughRaw());
+        mod.setUnderline(bungee.isUnderlinedRaw());
+        mod.setItalic(bungee.isItalicRaw());
+
+        mod.setChatHoverable(toNms(bungee.getHoverEvent()));
+        mod.setChatClickable(toNms(bungee.getClickEvent()));
+        mod.setInsertion(bungee.getInsertion());
+
+        return mod;
+    }
+
+    public static IChatBaseComponent toNms(BaseComponent bungee) {
+        final IChatBaseComponent nms;
+        if(bungee instanceof TextComponent) {
+            nms = new ChatComponentText(((TextComponent) bungee).getText());
+        } else if(bungee instanceof TranslatableComponent) {
+            final TranslatableComponent trans = (TranslatableComponent) bungee;
+            if(trans.getWith() == null || trans.getWith().isEmpty()) {
+                nms = new ChatMessage(trans.getTranslate());
+            } else {
+                final IChatBaseComponent[] with = new IChatBaseComponent[trans.getWith().size()];
+                for(int i = 0; i < trans.getWith().size(); i++) {
+                    with[i] = toNms(trans.getWith().get(i));
+                }
+                nms = new ChatMessage(trans.getTranslate(), with);
+            }
+        } else if(bungee instanceof SelectorComponent) {
+            nms = new ChatComponentSelector(((SelectorComponent) bungee).getSelector());
+        } else if(bungee instanceof ScoreComponent) {
+            nms = new ChatComponentScore(((ScoreComponent) bungee).getName(),
+                                         ((ScoreComponent) bungee).getObjective());
+        } else {
+            throw new IllegalArgumentException("Don't know how to convert a " + bungee.getClass().getName());
+        }
+
+        nms.setChatModifier(toNmsModifier(bungee));
+
+        if(bungee.getExtra() != null && !bungee.getExtra().isEmpty()) {
+            for(BaseComponent extra : bungee.getExtra()) {
+                nms.addSibling(toNms(extra));
+            }
+        }
+
+        return nms;
+    }
+
+    public static IChatBaseComponent toNms(BaseComponent[] bungees) {
+        if(bungees.length == 1) {
+            return toNms(bungees[0]);
+        } else {
+            final IChatBaseComponent nms = new ChatComponentText("");
+            for(BaseComponent bungee : bungees) {
+                nms.addSibling(toNms(bungee));
+            }
+            return nms;
+        }
+    }
+
+    public static ChatColor toBungee(EnumChatFormat nms) {
+        return convertEnum(nms, ChatColor.class);
+    }
+
+    public static HoverEvent.Action toBungee(EnumHoverAction nms) {
+        return convertEnum(nms, HoverEvent.Action.class);
+    }
+
+    public static ClickEvent.Action toBungee(EnumClickAction nms) {
+        return convertEnum(nms, ClickEvent.Action.class);
+    }
+
+    public static HoverEvent toBungee(ChatHoverable nms) {
+        return nms == null ? null : new HoverEvent(toBungee(nms.a()), new BaseComponent[]{ toBungee(nms.b()) });
+    }
+
+    public static ClickEvent toBungee(ChatClickable nms) {
+        return nms == null ? null : new ClickEvent(toBungee(nms.a()), nms.b());
+    }
+
+    public static void toBungeeModifier(BaseComponent bungee, ChatModifier nms) {
+        bungee.setColor(toBungee(nms.getColorRaw()));
+
+        bungee.setObfuscated(nms.isRandomRaw());
+        bungee.setBold(nms.isBoldRaw());
+        bungee.setStrikethrough(nms.isStrikethroughRaw());
+        bungee.setUnderlined(nms.isUnderlinedRaw());
+        bungee.setItalic(nms.isItalicRaw());
+
+        bungee.setHoverEvent(toBungee(nms.getHoverableRaw()));
+        bungee.setClickEvent(toBungee(nms.getClickableRaw()));
+        bungee.setInsertion(nms.getInsertionRaw());
+    }
+
+    public static BaseComponent toBungee(IChatBaseComponent nms) {
+        if(nms == null) return new TextComponent();
+        
+        final BaseComponent bungee;
+        if(nms instanceof ChatComponentText) {
+            bungee = new TextComponent(((ChatComponentText) nms).g());
+        } else if(nms instanceof ChatMessage) {
+            final ChatMessage nmsMessage = (ChatMessage) nms;
+            final BaseComponent[] with = new BaseComponent[nmsMessage.j().length];
+            for(int i = 0; i < nmsMessage.j().length; i++) {
+                final Object o = nmsMessage.j()[i];
+                with[i] = o instanceof IChatBaseComponent ? toBungee((IChatBaseComponent) o)
+                                                          : new TextComponent(String.valueOf(o));
+            }
+            bungee = new TranslatableComponent(nmsMessage.i(), with);
+        } else if(nms instanceof ChatComponentSelector) {
+            bungee = new SelectorComponent(((ChatComponentSelector) nms).g());
+        } else if(nms instanceof ChatComponentScore) {
+            bungee = new ScoreComponent(((ChatComponentScore) nms).g(), ((ChatComponentScore) nms).h());
+        } else {
+            throw new IllegalArgumentException("Don't know how to convert a " + nms.getClass().getName());
+        }
+
+        toBungeeModifier(bungee, nms.getChatModifier());
+
+        if(!nms.a().isEmpty()) {
+            List<BaseComponent> extras = new ArrayList<BaseComponent>(nms.a().size());
+            for(IChatBaseComponent c : nms.a()) {
+                extras.add(toBungee(c));
+            }
+            bungee.setExtra(extras);
+        }
+
+        return bungee;
+    }
+}
